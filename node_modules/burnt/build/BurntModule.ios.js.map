{"version":3,"file":"BurntModule.ios.js","sourceRoot":"","sources":["../src/BurntModule.ios.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExD,kEAAkE;AAClE,4EAA4E;AAC5E,MAAM,WAAW,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;AAEjD,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAG5C,MAAM,mBAAmB,GAAG,CAAC,MAAkB,EAAE,EAAE;IACjD,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACzE,OAAO,EAAE,GAAG,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC;AAClC,CAAC,CAAC;AACF,eAAe;IACb,UAAU,CAAC,OAAqB;QAC9B,WAAW,CAAC,UAAU,CAAC;YACrB,GAAG,OAAO;YACV,IAAI,EACF,OAAO,CAAC,MAAM,KAAK,QAAQ;gBACzB,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC;gBACnC,CAAC,CAAC,SAAS;SAChB,CAAC,CAAC;IACL,CAAC;IACD,UAAU,CAAC,OAAqB;QAC9B,WAAW,CAAC,UAAU,CAAC;YACrB,GAAG,OAAO;YACV,IAAI,EACF,OAAO,CAAC,MAAM,KAAK,QAAQ;gBACzB,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC;gBACnC,CAAC,CAAC,SAAS;SAChB,CAAC,CAAC;IACL,CAAC;IACD,qBAAqB;QACnB,WAAW,CAAC,qBAAqB,EAAE,CAAC;IACtC,CAAC;CACF,CAAC","sourcesContent":["import { requireNativeModule } from \"expo-modules-core\";\n\n// It loads the native module object from the JSI or falls back to\n// the bridge module (from NativeModulesProxy) if the remote debugger is on.\nconst BurntModule = requireNativeModule(\"Burnt\");\n\nimport { processColor } from \"react-native\";\nimport { AlertOptions, IconParams, ToastOptions } from \"./types\";\n\nconst getPlatfomIconProps = (params: IconParams) => {\n  const color = params.ios?.color ? processColor(params.ios?.color) : null;\n  return { ...params.ios, color };\n};\nexport default {\n  toastAsync(options: ToastOptions) {\n    BurntModule.toastAsync({\n      ...options,\n      icon:\n        options.preset === \"custom\"\n          ? getPlatfomIconProps(options.icon)\n          : undefined,\n    });\n  },\n  alertAsync(options: AlertOptions) {\n    BurntModule.alertAsync({\n      ...options,\n      icon:\n        options.preset === \"custom\"\n          ? getPlatfomIconProps(options.icon)\n          : undefined,\n    });\n  },\n  dismissAllAlertsAsync() {\n    BurntModule.dismissAllAlertsAsync();\n  },\n};\n"]}