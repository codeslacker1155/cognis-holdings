'use strict';

const EventEmitter = require('events');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const EventEmitter__default = /*#__PURE__*/_interopDefaultCompat(EventEmitter);

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const events = [
  "increaseProcessTime",
  "increaseTransformTime",
  "incrementJsRequests",
  "incrementOtherRequests",
  "increaseEntryHits",
  "registerTransform",
  "registerLog"
];
class EventBus {
  constructor() {
    /** Event emitter. */
    __publicField(this, "emitter", new EventEmitter__default());
    /**
     * Executes subscribed callback when a registered event is emitted by the debugger.
     * @param eventName Received event name.
     * @param callback Callback to execute when the event is emitted
     */
    __publicField(this, "on", (eventName, callback) => this.emitter.on(eventName, callback));
    /**
     * Sends an event to the debugger.
     * @param eventName Event name to send.
     * @param args Arguments to send along with the event.
     */
    __publicField(this, "emit", (event, ...args) => this.emitter.emit(event, ...args));
  }
  /**
   * Subscribe to events that may be emitted by the debugger.
   * @param cb Callback to execute when the relevant event is emitted.
   */
  subscribe(cb) {
    events.forEach((event) => {
      this.on(event, (...args) => cb(event, args));
    });
  }
}

exports.EventBus = EventBus;
