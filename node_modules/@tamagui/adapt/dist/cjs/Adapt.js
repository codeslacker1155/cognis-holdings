var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Adapt_exports = {};
__export(Adapt_exports, {
  Adapt: () => Adapt,
  AdaptContents: () => AdaptContents,
  AdaptParentContext: () => AdaptParentContext,
  useAdaptParent: () => useAdaptParent
});
module.exports = __toCommonJS(Adapt_exports);
var import_react = __toESM(require("react")), import_constants = require("@tamagui/constants"), import_core = require("@tamagui/core"), import_helpers = require("@tamagui/helpers"), import_jsx_runtime = require("react/jsx-runtime");
const AdaptParentContext = import_react.default.createContext(null), AdaptContents = (props) => {
  const context = import_react.default.useContext(AdaptParentContext);
  if (!context?.Contents)
    throw new Error(
      process.env.NODE_ENV === "production" ? "tamagui.dev/docs/intro/errors#warning-002" : "You're rendering a Tamagui <Adapt /> component without nesting it inside a parent that is able to adapt."
    );
  return import_react.default.createElement(context.Contents, props);
};
AdaptContents.shouldForwardSpace = !0;
const useAdaptParent = ({
  Contents
}) => {
  const [when, setWhen] = import_react.default.useState(null);
  return {
    AdaptProvider: import_react.default.useMemo(() => {
      const context = {
        Contents,
        setWhen
      };
      function AdaptProviderView(props) {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AdaptParentContext.Provider, { value: context, children: props.children });
      }
      return AdaptProviderView;
    }, [Contents]),
    when
  };
}, Adapt = (0, import_helpers.withStaticProperties)(
  function({ platform, when, children }) {
    const context = import_react.default.useContext(AdaptParentContext), media = (0, import_core.useMedia)();
    let enabled = !1;
    return typeof when == "function" ? enabled = when({ media }) : (enabled = !platform, platform === "touch" && (enabled = import_constants.isTouchable), platform === "native" && (enabled = !import_constants.isWeb), platform === "web" && (enabled = import_constants.isWeb), platform === "ios" && (enabled = import_constants.isIos), platform === "android" && (enabled = import_constants.isAndroid), when && !media[when] && (enabled = !1)), (0, import_constants.useIsomorphicLayoutEffect)(() => {
      enabled && context?.setWhen(when || enabled);
    }, [when, context, enabled]), enabled ? typeof children == "function" ? children({ enabled, media }) : children : null;
  },
  {
    Contents: AdaptContents
  }
);
//# sourceMappingURL=Adapt.js.map
