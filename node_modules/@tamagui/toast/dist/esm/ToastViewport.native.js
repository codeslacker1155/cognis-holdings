import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { AnimatePresence } from "@tamagui/animate-presence";
import { useComposedRefs } from "@tamagui/compose-refs";
import { isWeb } from "@tamagui/constants";
import { styled } from "@tamagui/core";
import { PortalHost } from "@tamagui/portal";
import { YStack } from "@tamagui/stacks";
import { VisuallyHidden } from "@tamagui/visually-hidden";
import * as React from "react";
import { TOAST_CONTEXT } from "./constants";
import { ToastPortal } from "./ToastPortal";
import { Collection, useCollection, useToastProviderContext } from "./ToastProvider";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var VIEWPORT_NAME = "ToastViewport", VIEWPORT_DEFAULT_HOTKEY = [
  "F8"
], VIEWPORT_PAUSE = "toast.viewportPause", VIEWPORT_RESUME = "toast.viewportResume", ToastViewportWrapperFrame = styled(YStack, {
  name: "ViewportWrapper",
  variants: {
    unstyled: {
      false: {
        pointerEvents: "box-none",
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        position: isWeb ? "fixed" : "absolute",
        maxWidth: "100%",
        tabIndex: 0,
        zIndex: 1e5
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), ToastViewportFrame = styled(YStack, {
  name: VIEWPORT_NAME,
  variants: {
    unstyled: {
      false: {
        pointerEvents: "box-none",
        position: isWeb ? "fixed" : "absolute",
        maxWidth: "100%"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), ToastViewport = /* @__PURE__ */ React.memo(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeToast = props.__scopeToast, _props_hotkey = props.hotkey, hotkey = _props_hotkey === void 0 ? VIEWPORT_DEFAULT_HOTKEY : _props_hotkey, _props_label = props.label, label = _props_label === void 0 ? "Notifications ({hotkey})" : _props_label, _props_name = props.name, name = _props_name === void 0 ? "default" : _props_name, multipleToasts = props.multipleToasts, zIndex = props.zIndex, portalToRoot = props.portalToRoot, viewportProps = _object_without_properties(props, [
    "__scopeToast",
    "hotkey",
    "label",
    "name",
    "multipleToasts",
    "zIndex",
    "portalToRoot"
  ]), context = useToastProviderContext(__scopeToast), getItems = useCollection(__scopeToast || TOAST_CONTEXT), headFocusProxyRef = React.useRef(null), tailFocusProxyRef = React.useRef(null), wrapperRef = React.useRef(null), ref = React.useRef(null), onViewportChange = React.useCallback(function(el) {
    context.viewports[name] !== el && context.onViewportChange(name, el);
  }, [
    name,
    context.viewports
  ]), composedRefs = useComposedRefs(forwardedRef, ref, onViewportChange), hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, ""), hasToasts = context.toastCount > 0;
  React.useEffect(function() {
    if (isWeb && context.toastCount !== 0) {
      var handleKeyDown = function(event) {
        var _ref_current, isHotkeyPressed = hotkey.every(function(key) {
          return event[key] || event.code === key;
        });
        isHotkeyPressed && ((_ref_current = ref.current) === null || _ref_current === void 0 || _ref_current.focus());
      };
      return document.addEventListener("keydown", handleKeyDown), function() {
        document.removeEventListener("keydown", handleKeyDown);
      };
    }
  }, [
    hotkey,
    context.toastCount
  ]), React.useEffect(function() {
    if (isWeb && context.toastCount !== 0) {
      var wrapper = wrapperRef.current, viewport = ref.current;
      if (hasToasts && wrapper && viewport) {
        var handlePause = function() {
          if (!context.isClosePausedRef.current) {
            var pauseEvent = new CustomEvent(VIEWPORT_PAUSE);
            viewport.dispatchEvent(pauseEvent), context.isClosePausedRef.current = !0;
          }
        }, handleResume = function() {
          if (context.isClosePausedRef.current) {
            var resumeEvent = new CustomEvent(VIEWPORT_RESUME);
            viewport.dispatchEvent(resumeEvent), context.isClosePausedRef.current = !1;
          }
        }, handleFocusOutResume = function(event) {
          var isFocusMovingOutside = !wrapper.contains(event.relatedTarget);
          isFocusMovingOutside && handleResume();
        }, handlePointerLeaveResume = function() {
          var isFocusInside = wrapper.contains(document.activeElement);
          isFocusInside || handleResume();
        };
        return wrapper.addEventListener("focusin", handlePause), wrapper.addEventListener("focusout", handleFocusOutResume), wrapper.addEventListener("pointermove", handlePause), wrapper.addEventListener("pointerleave", handlePointerLeaveResume), window.addEventListener("blur", handlePause), window.addEventListener("focus", handleResume), function() {
          wrapper.removeEventListener("focusin", handlePause), wrapper.removeEventListener("focusout", handleFocusOutResume), wrapper.removeEventListener("pointermove", handlePause), wrapper.removeEventListener("pointerleave", handlePointerLeaveResume), window.removeEventListener("blur", handlePause), window.removeEventListener("focus", handleResume);
        };
      }
    }
  }, [
    hasToasts,
    context.isClosePausedRef,
    context.toastCount
  ]);
  var getSortedTabbableCandidates = React.useCallback(function(param) {
    var tabbingDirection = param.tabbingDirection, toastItems = getItems(), tabbableCandidates = toastItems.map(function(toastItem) {
      var toastNode = toastItem.ref.current, toastTabbableCandidates = [
        toastNode
      ].concat(_to_consumable_array(getTabbableCandidates(toastNode)));
      return tabbingDirection === "forwards" ? toastTabbableCandidates : toastTabbableCandidates.reverse();
    });
    return (tabbingDirection === "forwards" ? tabbableCandidates.reverse() : tabbableCandidates).flat();
  }, [
    getItems
  ]);
  React.useEffect(function() {
    if (isWeb && context.toastCount !== 0) {
      var viewport = ref.current;
      if (viewport) {
        var handleKeyDown = function(event) {
          var isMetaKey = event.altKey || event.ctrlKey || event.metaKey, isTabKey = event.key === "Tab" && !isMetaKey;
          if (isTabKey) {
            var focusedElement = document.activeElement, isTabbingBackwards = event.shiftKey, targetIsViewport = event.target === viewport;
            if (targetIsViewport && isTabbingBackwards) {
              var _headFocusProxyRef_current;
              (_headFocusProxyRef_current = headFocusProxyRef.current) === null || _headFocusProxyRef_current === void 0 || _headFocusProxyRef_current.focus();
              return;
            }
            var tabbingDirection = isTabbingBackwards ? "backwards" : "forwards", sortedCandidates = getSortedTabbableCandidates({
              tabbingDirection
            }), index = sortedCandidates.findIndex(function(candidate) {
              return candidate === focusedElement;
            });
            if (focusFirst(sortedCandidates.slice(index + 1)))
              event.preventDefault();
            else {
              var _headFocusProxyRef_current1, _tailFocusProxyRef_current;
              isTabbingBackwards ? (_headFocusProxyRef_current1 = headFocusProxyRef.current) === null || _headFocusProxyRef_current1 === void 0 || _headFocusProxyRef_current1.focus() : (_tailFocusProxyRef_current = tailFocusProxyRef.current) === null || _tailFocusProxyRef_current === void 0 || _tailFocusProxyRef_current.focus();
            }
          }
        };
        return viewport.addEventListener("keydown", handleKeyDown), function() {
          return viewport.removeEventListener("keydown", handleKeyDown);
        };
      }
    }
  }, [
    getItems,
    getSortedTabbableCandidates,
    context.toastCount
  ]);
  var contents = /* @__PURE__ */ _jsxs(ToastViewportWrapperFrame, {
    ref: wrapperRef,
    role: "region",
    "aria-label": label.replace("{hotkey}", hotkeyLabel),
    // // Ensure virtual cursor from landmarks menus triggers focus/blur for pause/resume
    tabIndex: -1,
    children: [
      // // incase list has size when empty (e.g. padding), we remove pointer events so
      // // it doesn't prevent interactions with page elements that it overlays
      // pointerEvents={hasToasts ? undefined : 'none'}
      hasToasts && /* @__PURE__ */ _jsx(FocusProxy, {
        __scopeToast,
        viewportName: name,
        ref: headFocusProxyRef,
        onFocusFromOutsideViewport: function() {
          var tabbableCandidates = getSortedTabbableCandidates({
            tabbingDirection: "forwards"
          });
          focusFirst(tabbableCandidates);
        }
      }),
      /**
      * tabindex on the the list so that it can be focused when items are removed. we focus
      * the list instead of the viewport so it announces number of items remaining.
      */
      /* @__PURE__ */ _jsx(Collection.Slot, {
        __scopeCollection: __scopeToast || TOAST_CONTEXT,
        children: /* @__PURE__ */ _jsx(ToastViewportFrame, _object_spread_props(_object_spread({
          focusable: context.toastCount > 0,
          ref: composedRefs
        }, viewportProps), {
          children: /* @__PURE__ */ _jsx(PortalHost, {
            render: function(children) {
              return /* @__PURE__ */ _jsx(AnimatePresence, {
                exitBeforeEnter: !multipleToasts,
                children
              });
            },
            name: name ?? "default"
          })
        }))
      }),
      hasToasts && /* @__PURE__ */ _jsx(FocusProxy, {
        __scopeToast,
        viewportName: name,
        ref: tailFocusProxyRef,
        onFocusFromOutsideViewport: function() {
          var tabbableCandidates = getSortedTabbableCandidates({
            tabbingDirection: "backwards"
          });
          focusFirst(tabbableCandidates);
        }
      })
    ]
  });
  return portalToRoot ? /* @__PURE__ */ _jsx(ToastPortal, _object_spread_props(_object_spread({}, typeof zIndex == "number" ? {
    zIndex
  } : {}), {
    children: contents
  })) : contents;
}));
ToastViewport.displayName = VIEWPORT_NAME;
var FOCUS_PROXY_NAME = "ToastFocusProxy", FocusProxy = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeToast = props.__scopeToast, onFocusFromOutsideViewport = props.onFocusFromOutsideViewport, viewportName = props.viewportName, proxyProps = _object_without_properties(props, [
    "__scopeToast",
    "onFocusFromOutsideViewport",
    "viewportName"
  ]), context = useToastProviderContext(__scopeToast), viewport = context.viewports[viewportName];
  return /* @__PURE__ */ _jsx(VisuallyHidden, _object_spread_props(_object_spread({
    "aria-hidden": !0,
    tabIndex: 0
  }, proxyProps), {
    ref: forwardedRef,
    // Avoid page scrolling when focus is on the focus proxy
    position: isWeb ? "fixed" : "absolute",
    onFocus: function(event) {
      if (isWeb) {
        var prevFocusedElement = event.relatedTarget, isFocusFromOutsideViewport = !(viewport != null && viewport.contains(prevFocusedElement));
        isFocusFromOutsideViewport && onFocusFromOutsideViewport();
      }
    }
  }));
});
FocusProxy.displayName = FOCUS_PROXY_NAME;
function focusFirst(candidates) {
  if (isWeb) {
    var previouslyFocusedElement = document.activeElement;
    return candidates.some(function(candidate) {
      return candidate === previouslyFocusedElement ? !0 : (candidate.focus(), document.activeElement !== previouslyFocusedElement);
    });
  }
}
function getTabbableCandidates(container) {
  if (!isWeb) return [];
  for (var containerHtml = container, nodes = [], walker = document.createTreeWalker(containerHtml, NodeFilter.SHOW_ELEMENT, {
    acceptNode: function(node) {
      var isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      return node.disabled || node.hidden || isHiddenInput ? NodeFilter.FILTER_SKIP : node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  }); walker.nextNode(); ) nodes.push(walker.currentNode);
  return nodes;
}
export {
  ToastViewport,
  VIEWPORT_DEFAULT_HOTKEY,
  VIEWPORT_PAUSE,
  VIEWPORT_RESUME
};
//# sourceMappingURL=ToastViewport.js.map
