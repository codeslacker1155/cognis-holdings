import { jsx as _jsx } from "react/jsx-runtime";
import { createCollection } from "@tamagui/collection";
import { createStyledContext } from "@tamagui/core";
import * as React from "react";
import { TOAST_CONTEXT } from "./constants";
import { ToastImperativeProvider } from "./ToastImperative";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var PROVIDER_NAME = "ToastProvider", _createCollection = _sliced_to_array(createCollection("Toast"), 2), Collection = _createCollection[0], useCollection = _createCollection[1], _createStyledContext = createStyledContext(), ToastProviderProvider = _createStyledContext.Provider, useToastProviderContext = _createStyledContext.useStyledContext, ToastProvider = function(props) {
  var __scopeToast = props.__scopeToast, providedId = props.id, burntOptions = props.burntOptions, native = props.native, notificationOptions = props.notificationOptions, _props_label = props.label, label2 = _props_label === void 0 ? "Notification" : _props_label, _props_duration = props.duration, duration = _props_duration === void 0 ? 5e3 : _props_duration, _props_swipeDirection = props.swipeDirection, swipeDirection = _props_swipeDirection === void 0 ? "right" : _props_swipeDirection, _props_swipeThreshold = props.swipeThreshold, swipeThreshold = _props_swipeThreshold === void 0 ? 50 : _props_swipeThreshold, children = props.children, backupId = React.useId(), id = providedId ?? backupId, _React_useState = _sliced_to_array(React.useState({}), 2), viewports = _React_useState[0], setViewports = _React_useState[1], _React_useState1 = _sliced_to_array(React.useState(0), 2), toastCount = _React_useState1[0], setToastCount = _React_useState1[1], isFocusedToastEscapeKeyDownRef = React.useRef(!1), isClosePausedRef = React.useRef(!1), handleViewportChange = React.useCallback(function(name, viewport) {
    React.startTransition(function() {
      setViewports(function(prev) {
        return _object_spread_props(_object_spread({}, prev), _define_property({}, name, viewport));
      });
    });
  }, []), options = React.useMemo(
    function() {
      return {
        duration,
        burntOptions,
        native,
        notificationOptions
      };
    },
    // nested simple object so JSON.stringify
    [
      JSON.stringify([
        duration,
        burntOptions,
        native,
        notificationOptions
      ])
    ]
  );
  return /* @__PURE__ */ _jsx(Collection.Provider, {
    __scopeCollection: __scopeToast || TOAST_CONTEXT,
    children: /* @__PURE__ */ _jsx(ToastProviderProvider, {
      scope: __scopeToast,
      id,
      label: label2,
      duration,
      swipeDirection,
      swipeThreshold,
      toastCount,
      viewports,
      onViewportChange: handleViewportChange,
      onToastAdd: React.useCallback(function() {
        React.startTransition(function() {
          setToastCount(function(prevCount) {
            return prevCount + 1;
          });
        });
      }, []),
      onToastRemove: React.useCallback(function() {
        React.startTransition(function() {
          setToastCount(function(prevCount) {
            return prevCount - 1;
          });
        });
      }, []),
      isFocusedToastEscapeKeyDownRef,
      isClosePausedRef,
      options,
      children: /* @__PURE__ */ _jsx(ToastImperativeProvider, {
        options,
        children
      })
    })
  });
};
function ReprogapateToastProvider(props) {
  var children = props.children, context = props.context;
  return /* @__PURE__ */ _jsx(Collection.Provider, {
    __scopeCollection: TOAST_CONTEXT,
    children: /* @__PURE__ */ _jsx(ToastProviderProvider, _object_spread_props(_object_spread({}, context), {
      children: /* @__PURE__ */ _jsx(ToastImperativeProvider, {
        options: context.options,
        children
      })
    }))
  });
}
ToastProvider.propTypes = {
  label: function(props) {
    if (props.label && typeof props.label == "string" && !props.label.trim()) {
      var error = "Invalid prop `label` supplied to `".concat(PROVIDER_NAME, "`. Expected non-empty `string`.");
      return new Error(error);
    }
    return null;
  }
};
ToastProvider.displayName = PROVIDER_NAME;
export {
  Collection,
  ReprogapateToastProvider,
  ToastProvider,
  useCollection,
  useToastProviderContext
};
//# sourceMappingURL=ToastProvider.js.map
