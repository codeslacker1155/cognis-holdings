var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Toast_exports = {};
__export(Toast_exports, {
  Toast: () => Toast,
  ToastProvider: () => import_ToastProvider.ToastProvider,
  ToastViewport: () => import_ToastViewport.ToastViewport,
  useToast: () => import_ToastImperative.useToast,
  useToastController: () => import_ToastImperative.useToastController,
  useToastState: () => import_ToastImperative.useToastState
});
module.exports = __toCommonJS(Toast_exports);
var import_core = require("@tamagui/core"), import_helpers = require("@tamagui/helpers"), import_stacks = require("@tamagui/stacks"), import_text = require("@tamagui/text"), import_use_controllable_state = require("@tamagui/use-controllable-state"), React = __toESM(require("react")), import_constants = require("./constants"), import_ToastAnnounce = require("./ToastAnnounce"), import_ToastImperative = require("./ToastImperative"), import_ToastImpl = require("./ToastImpl"), import_ToastProvider = require("./ToastProvider"), import_ToastViewport = require("./ToastViewport"), import_jsx_runtime = require("react/jsx-runtime");
const TITLE_NAME = "ToastTitle", ToastTitle = (0, import_core.styled)(import_text.SizableText, {
  name: TITLE_NAME,
  variants: {
    unstyled: {
      false: {
        color: "$color",
        size: "$4"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
ToastTitle.displayName = TITLE_NAME;
const DESCRIPTION_NAME = "ToastDescription", ToastDescription = (0, import_core.styled)(import_text.SizableText, {
  name: DESCRIPTION_NAME,
  variants: {
    unstyled: {
      false: {
        color: "$color11",
        size: "$1"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
ToastDescription.displayName = DESCRIPTION_NAME;
const ACTION_NAME = "ToastAction", ToastAction = React.forwardRef(
  (props, forwardedRef) => {
    const { altText, ...actionProps } = props;
    return altText ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ToastAnnounce.ToastAnnounceExclude, { altText, asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ToastClose, { ...actionProps, ref: forwardedRef }) }) : null;
  }
);
ToastAction.propTypes = {
  altText(props) {
    return props.altText ? null : new Error(`Missing prop \`altText\` expected on \`${ACTION_NAME}\``);
  }
};
ToastAction.displayName = ACTION_NAME;
const CLOSE_NAME = "ToastClose", ToastCloseFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: CLOSE_NAME,
  tag: "button"
}), ToastClose = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, ...closeProps } = props, interactiveContext = (0, import_ToastImpl.useToastInteractiveContext)(__scopeToast);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ToastAnnounce.ToastAnnounceExclude, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      ToastCloseFrame,
      {
        accessibilityLabel: "Dialog Close",
        ...closeProps,
        ref: forwardedRef,
        onPress: (0, import_helpers.composeEventHandlers)(props.onPress, interactiveContext.onClose)
      }
    ) });
  }
);
ToastClose.displayName = CLOSE_NAME;
const ToastComponent = import_ToastImpl.ToastImplFrame.styleable(
  (props, forwardedRef) => {
    const { forceMount, open: openProp, defaultOpen, onOpenChange, ...toastProps } = props, [open, setOpen] = (0, import_use_controllable_state.useControllableState)({
      prop: openProp,
      defaultProp: defaultOpen ?? !0,
      onChange: onOpenChange,
      strategy: "most-recent-wins"
    }), id = React.useId(), onPause = (0, import_core.useEvent)(props.onPause), onResume = (0, import_core.useEvent)(props.onResume);
    return forceMount || open ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_ToastImpl.ToastImpl,
      {
        id,
        open,
        ...toastProps,
        ref: forwardedRef,
        onClose: () => setOpen(!1),
        onPause,
        onResume,
        onSwipeEnd: (0, import_helpers.composeEventHandlers)(props.onSwipeEnd, (event) => {
          setOpen(!1);
        })
      }
    ) : null;
  }
);
ToastComponent.displayName = import_constants.TOAST_NAME;
const Toast = (0, import_helpers.withStaticProperties)(ToastComponent, {
  Title: ToastTitle,
  Description: ToastDescription,
  Action: ToastAction,
  Close: ToastClose
});
//# sourceMappingURL=Toast.js.map
