"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var ToastImperative_exports = {};
__export(ToastImperative_exports, {
  ToastImperativeProvider: () => ToastImperativeProvider,
  useToast: () => useToast,
  useToastController: () => useToastController,
  useToastState: () => useToastState
});
module.exports = __toCommonJS(ToastImperative_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_react = __toESM(require("react")), import_core = require("@tamagui/core"), import_react_native = require("react-native"), import_createNativeToast = require("./createNativeToast");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _type_of(obj) {
  "@swc/helpers - typeof";
  return obj && typeof Symbol < "u" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var ToastContext = /* @__PURE__ */ import_react.default.createContext({}), ToastCurrentContext = /* @__PURE__ */ import_react.default.createContext(null), useToastController = function() {
  return import_react.default.useContext(ToastContext);
}, useToastState = function() {
  return import_react.default.useContext(ToastCurrentContext);
}, useToast = function() {
  return _object_spread_props(_object_spread({}, useToastController()), {
    currentToast: useToastState()
  });
}, ToastImperativeProvider = function(param) {
  var children = param.children, options = param.options, counterRef = import_react.default.useRef(0), _React_useState = _sliced_to_array(import_react.default.useState(null), 2), toast = _React_useState[0], setToast = _React_useState[1], _React_useState1 = _sliced_to_array(import_react.default.useState(null), 2), lastNativeToastRef = _React_useState1[0], setLastNativeToastRef = _React_useState1[1], show = import_react.default.useCallback(function(title, showOptions) {
    var _showOptions_native, native = (_showOptions_native = showOptions == null ? void 0 : showOptions.native) !== null && _showOptions_native !== void 0 ? _showOptions_native : options.native, isWebNative = Array.isArray(native) ? native.includes("web") : native === "web", isMobileNative = Array.isArray(native) ? native.includes("mobile") : native === "mobile", isAndroidNative = isMobileNative || (Array.isArray(native) ? native.includes("android") : native === "android"), isIosNative = isMobileNative || (Array.isArray(native) ? native.includes("ios") : native === "ios"), isHandledNatively = native === !0 || import_core.isWeb && isWebNative || !import_core.isWeb && isMobileNative || import_react_native.Platform.OS === "android" && isAndroidNative || import_react_native.Platform.OS === "ios" && isIosNative;
    if (isHandledNatively) {
      var nativeToastResult = (0, import_createNativeToast.createNativeToast)(title, showOptions ?? {});
      (typeof nativeToastResult > "u" ? "undefined" : _type_of(nativeToastResult)) === "object" && nativeToastResult.nativeToastRef && setLastNativeToastRef(nativeToastResult.nativeToastRef);
    }
    counterRef.current++;
    var _showOptions_viewportName;
    return setToast(_object_spread_props(_object_spread({}, showOptions == null ? void 0 : showOptions.customData, showOptions), {
      viewportName: (_showOptions_viewportName = showOptions == null ? void 0 : showOptions.viewportName) !== null && _showOptions_viewportName !== void 0 ? _showOptions_viewportName : "default",
      title,
      id: counterRef.current.toString(),
      isHandledNatively
    })), !0;
  }, [
    setToast,
    options.native
  ]), hide = import_react.default.useCallback(function() {
    lastNativeToastRef == null || lastNativeToastRef.close(), setToast(null);
  }, [
    setToast,
    lastNativeToastRef
  ]), contextValue = import_react.default.useMemo(function() {
    return {
      show,
      hide,
      nativeToast: lastNativeToastRef,
      options
    };
  }, [
    show,
    hide,
    lastNativeToastRef,
    JSON.stringify(options || null)
  ]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ToastContext.Provider, {
    value: contextValue,
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ToastCurrentContext.Provider, {
      value: toast,
      children
    })
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ToastImperativeProvider,
  useToast,
  useToastController,
  useToastState
});
//# sourceMappingURL=ToastImperative.js.map
