var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var ToastAnnounce_exports = {};
__export(ToastAnnounce_exports, {
  ToastAnnounce: () => ToastAnnounce,
  ToastAnnounceExclude: () => ToastAnnounceExclude
});
module.exports = __toCommonJS(ToastAnnounce_exports);
var import_constants = require("@tamagui/constants"), import_core = require("@tamagui/core"), import_portal = require("@tamagui/portal"), import_visually_hidden = require("@tamagui/visually-hidden"), React = __toESM(require("react")), import_ToastProvider = require("./ToastProvider"), import_jsx_runtime = require("react/jsx-runtime");
const ToastAnnounceExcludeFrame = (0, import_core.styled)(import_core.Stack, {
  name: "ToastAnnounceExclude"
}), ToastAnnounceExclude = React.forwardRef((props, forwardedRef) => {
  const { altText, ...announceExcludeProps } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    ToastAnnounceExcludeFrame,
    {
      "data-toast-announce-exclude": "",
      "data-toast-announce-alt": altText || void 0,
      ...announceExcludeProps,
      ref: forwardedRef
    }
  );
}), ToastAnnounce = (props) => {
  const { __scopeToast, children, ...announceProps } = props, context = (0, import_ToastProvider.useToastProviderContext)(__scopeToast), [renderAnnounceText, setRenderAnnounceText] = React.useState(!1), [isAnnounced, setIsAnnounced] = React.useState(!1);
  return useNextFrame(() => {
    React.startTransition(() => {
      setRenderAnnounceText(!0);
    });
  }), React.useEffect(() => {
    const timer = setTimeout(() => setIsAnnounced(!0), 1e3);
    return () => clearTimeout(timer);
  }, []), isAnnounced ? null : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_portal.Portal, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_visually_hidden.VisuallyHidden, { ...announceProps, children: renderAnnounceText && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_core.Text, { children: [
    context.label,
    " ",
    children
  ] }) }) });
};
function useNextFrame(callback = () => {
}) {
  const fn = (0, import_core.useEvent)(callback);
  (0, import_constants.useIsomorphicLayoutEffect)(() => {
    let raf1 = 0, raf2 = 0;
    return raf1 = requestAnimationFrame(() => {
      raf2 = requestAnimationFrame(fn);
    }), () => {
      cancelAnimationFrame(raf1), cancelAnimationFrame(raf2);
    };
  }, [fn]);
}
//# sourceMappingURL=ToastAnnounce.js.map
