import * as StaticIn from "@tamagui/static";
import path from "node:path";
import { normalizePath } from "vite";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg), value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
function _ts_generator(thisArg, body) {
  var f, y, t, g, _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  };
  return g = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    for (; _; ) try {
      if (f = 1, y && (t = op[0] & 2 ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      switch (y = 0, t && (op = [
        op[0] & 2,
        t.value
      ]), op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          return _.label++, {
            value: op[1],
            done: !1
          };
        case 5:
          _.label++, y = op[1], op = [
            0
          ];
          continue;
        case 7:
          op = _.ops.pop(), _.trys.pop();
          continue;
        default:
          if (t = _.trys, !(t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1], t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2], _.ops.push(op);
            break;
          }
          t[2] && _.ops.pop(), _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [
        6,
        e
      ], y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: !0
    };
  }
}
var Static = StaticIn.default || StaticIn, styleUpdateEvent = function(fileId) {
  return "tamagui-style-update:".concat(fileId);
};
function tamaguiExtractPlugin(optionsIn) {
  if (optionsIn != null && optionsIn.disable)
    return {
      name: "tamagui-extract"
    };
  var extractor = null, cssMap = /* @__PURE__ */ new Map(), config, tamaguiOptions, server, virtualExt, disableStatic = !1, getAbsoluteVirtualFileId = function(filePath) {
    return filePath.startsWith(config.root) ? filePath : normalizePath(path.join(config.root, filePath));
  };
  function isVite6AndNotClient(environment) {
    return (environment == null ? void 0 : environment.name) && environment.name !== "client";
  }
  return {
    name: "tamagui-extract",
    enforce: "pre",
    configureServer: function(_server) {
      server = _server;
    },
    buildEnd: function() {
      extractor == null || extractor.cleanupBeforeExit();
    },
    config: function(userConf) {
      var _userConf, _userConf_optimizeDeps;
      (_userConf = userConf).optimizeDeps || (_userConf.optimizeDeps = {}), (_userConf_optimizeDeps = userConf.optimizeDeps).include || (_userConf_optimizeDeps.include = []), userConf.optimizeDeps.include.push("@tamagui/core/inject-styles");
    },
    configResolved: function(resolvedConfig) {
      return _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
          return extractor ? [
            2
          ] : (config = resolvedConfig, virtualExt = ".tamagui.css", [
            2
          ]);
        });
      })();
    },
    resolveId: function(source) {
      return _async_to_generator(function() {
        var _source_split, validId, query, absoluteId;
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return isVite6AndNotClient(this.environment) ? [
                2
              ] : extractor ? [
                3,
                2
              ] : (tamaguiOptions = Static.loadTamaguiBuildConfigSync(_object_spread_props(_object_spread({}, optionsIn), {
                platform: "web"
              })), disableStatic = !!tamaguiOptions.disable, extractor = Static.createExtractor({
                logger: config.logger
              }), [
                4,
                extractor.loadTamagui(_object_spread({
                  components: [
                    "tamagui"
                  ],
                  platform: "web"
                }, tamaguiOptions))
              ]);
            case 1:
              _state.sent(), _state.label = 2;
            case 2:
              return _source_split = _sliced_to_array(source.split("?"), 2), validId = _source_split[0], query = _source_split[1], validId.endsWith(virtualExt) ? (absoluteId = source.startsWith(config.root) ? source : getAbsoluteVirtualFileId(validId), cssMap.has(absoluteId) ? [
                2,
                absoluteId + (query ? "?".concat(query) : "")
              ] : [
                2
              ]) : [
                2
              ];
          }
        });
      }).apply(this);
    },
    /**
    * TODO
    *
    *   mainFields module:jsx breaks, so lets just have a mapping here
    *   where we load() and map it to the jsx path before transform
    *
    */
    load: function(id) {
      if (!(disableStatic || isVite6AndNotClient(this.environment))) {
        var _id_split = _sliced_to_array(id.split("?"), 1), validId = _id_split[0];
        return cssMap.get(validId);
      }
    },
    transform: function(code, id, ssrParam) {
      return _async_to_generator(function() {
        var _id_split, validId, firstCommentIndex, _Static_getPragmaOptions, shouldDisable, shouldPrintDebug, _this_environment, extracted, rootRelativeId, absoluteId, source, moduleGraph, _Array_from, module;
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return disableStatic || isVite6AndNotClient(this.environment) ? [
                2
              ] : (_id_split = _sliced_to_array(id.split("?"), 1), validId = _id_split[0], validId.endsWith(".tsx") ? (firstCommentIndex = code.indexOf("// "), _Static_getPragmaOptions = Static.getPragmaOptions({
                source: firstCommentIndex >= 0 ? code.slice(firstCommentIndex) : "",
                path: validId
              }), shouldDisable = _Static_getPragmaOptions.shouldDisable, shouldPrintDebug = _Static_getPragmaOptions.shouldPrintDebug, shouldPrintDebug && (console.trace("Debugging file: ".concat(id, " in environment: ").concat((_this_environment = this.environment) === null || _this_environment === void 0 ? void 0 : _this_environment.name)), console.info(`

Original source:
`.concat(code, `

`))), shouldDisable ? [
                2
              ] : [
                4,
                Static.extractToClassNames({
                  extractor,
                  source: code,
                  sourcePath: validId,
                  options: tamaguiOptions,
                  shouldPrintDebug
                })
              ]) : [
                2
              ]);
            case 1:
              return extracted = _state.sent(), extracted ? (rootRelativeId = "".concat(validId).concat(virtualExt), absoluteId = getAbsoluteVirtualFileId(rootRelativeId), source = extracted.js, extracted.styles && (server && cssMap.has(absoluteId) && cssMap.get(absoluteId) !== extracted.styles && (moduleGraph = server.moduleGraph, _Array_from = _sliced_to_array(Array.from(moduleGraph.getModulesByFile(absoluteId) || []), 1), module = _Array_from[0], module && (moduleGraph.invalidateModule(module), module.lastHMRTimestamp = module.lastInvalidationTimestamp || Date.now()), server.ws.send({
                type: "custom",
                event: styleUpdateEvent(absoluteId),
                data: extracted.styles
              })), source = "".concat(source, `
import "`).concat(rootRelativeId, '";'), cssMap.set(absoluteId, extracted.styles)), [
                2,
                {
                  code: source.toString(),
                  map: extracted.map
                }
              ]) : [
                2
              ];
          }
        });
      }).apply(this);
    }
  };
}
export {
  tamaguiExtractPlugin
};
//# sourceMappingURL=extract.js.map
