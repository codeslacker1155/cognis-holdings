import * as StaticIn from "@tamagui/static";
import { transformWithEsbuild } from "vite";
const Static = StaticIn.default || StaticIn;
function tamaguiPlugin(tamaguiOptionsIn = {}) {
  const options = {
      ...tamaguiOptionsIn,
      ...Static.loadTamaguiBuildConfigSync(tamaguiOptionsIn)
    },
    {
      platform = "web"
    } = options,
    watcher = options.disableWatchTamaguiConfig ? null : Static.watchTamaguiConfig({
      platform,
      components: ["tamagui"],
      config: "./src/tamagui.config.ts",
      ...options
    }).catch(err => {
      console.error(` [Tamagui] Error watching config: ${err}`);
    }),
    components = [... /* @__PURE__ */new Set([...(options.components || []), "tamagui", "@tamagui/core"])],
    noExternalSSR = new RegExp(`${components.join("|")}|react-native|expo-linear-gradient`, "ig"),
    extensions = [`.${platform}.mjs`, `.${platform}.js`, `.${platform}.jsx`, `.${platform}.ts`, `.${platform}.tsx`, ".mjs", ".js", ".mts", ".ts", ".jsx", ".tsx", ".json"];
  return {
    name: "tamagui-base",
    enforce: "pre",
    async buildEnd() {
      await watcher?.then(res => {
        res?.dispose();
      });
    },
    // // fix expo-linear-gradient
    async transform(code, id) {
      if (id.includes("expo-linear-gradient")) return transformWithEsbuild(code, id, {
        loader: "jsx",
        jsx: "automatic"
        // ðŸ‘ˆ this is important
      });
    },
    async config(userConfig, env) {
      return {
        define: {
          // reanimated support
          _frameTimestamp: void 0,
          _WORKLET: !1,
          __DEV__: `${env.mode === "development"}`,
          "process.env.NODE_ENV": JSON.stringify(process.env.NODE_ENV || env.mode),
          "process.env.ENABLE_RSC": JSON.stringify(process.env.ENABLE_RSC || ""),
          "process.env.ENABLE_STEPS": JSON.stringify(process.env.ENABLE_STEPS || ""),
          "process.env.IS_STATIC": JSON.stringify(!1),
          ...(env.mode === "production" && {
            "process.env.TAMAGUI_OPTIMIZE_THEMES": JSON.stringify(!0)
          })
        },
        optimizeDeps: {
          jsx: "transform",
          include: platform === "web" ? ["expo-linear-gradient"] : [],
          // disabled: false,
          esbuildOptions: {
            resolveExtensions: extensions,
            loader: {
              ".js": "jsx"
            }
          }
        },
        ssr: {
          noExternal: noExternalSSR
        },
        resolve: {
          extensions,
          alias: {
            ...(platform !== "native" && {
              "react-native/Libraries/Renderer/shims/ReactFabric": "@tamagui/proxy-worm",
              "react-native/Libraries/Utilities/codegenNativeComponent": "@tamagui/proxy-worm",
              "react-native-svg": "@tamagui/react-native-svg",
              "react-native": "react-native-web",
              ...(options.useReactNativeWebLite && {
                "react-native": "react-native-web-lite",
                "react-native-web": "react-native-web-lite"
              }),
              ...(options.useReactNativeWebLite === "without-animated" && {
                "react-native": "react-native-web-lite/without-animated",
                "react-native-web": "react-native-web-lite/without-animated"
              })
            })
          }
        }
      };
    }
  };
}
export { tamaguiPlugin };
//# sourceMappingURL=plugin.mjs.map
