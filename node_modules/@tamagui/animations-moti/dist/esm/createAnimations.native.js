import React from "react";
import { PresenceContext, ResetPresence, usePresence } from "@tamagui/use-presence";
import { useMotify } from "moti";
import Animated, { cancelAnimation, runOnJS, useAnimatedReaction, useAnimatedStyle, useDerivedValue, useSharedValue, withSpring, withTiming } from "react-native-reanimated";
function _type_of(obj) {
  "@swc/helpers - typeof";
  return obj && typeof Symbol < "u" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
var onlyAnimateKeys = {
  transform: !0,
  opacity: !0,
  height: !0,
  width: !0,
  backgroundColor: !0,
  borderColor: !0,
  borderLeftColor: !0,
  borderRightColor: !0,
  borderTopColor: !0,
  borderBottomColor: !0,
  borderRadius: !0,
  borderTopLeftRadius: !0,
  borderTopRightRadius: !0,
  borderBottomLeftRadius: !0,
  borderBottomRightRadius: !0,
  borderLeftWidth: !0,
  borderRightWidth: !0,
  borderTopWidth: !0,
  borderBottomWidth: !0,
  color: !0,
  left: !0,
  right: !0,
  top: !0,
  bottom: !0,
  fontSize: !0,
  fontWeight: !0,
  lineHeight: !0,
  letterSpacing: !0
};
function createAnimations(animations) {
  return {
    // View: isWeb ? AnimatedView : Animated.View,
    // Text: isWeb ? AnimatedText : Animated.Text,
    View: Animated.View,
    Text: Animated.Text,
    isReactNative: !0,
    animations,
    usePresence,
    ResetPresence,
    useAnimatedNumber: function(initial) {
      var sharedValue = useSharedValue(initial);
      return React.useMemo(function() {
        return {
          getInstance: function() {
            "worklet";
            return sharedValue;
          },
          getValue: function() {
            "worklet";
            return sharedValue.value;
          },
          setValue: function(next) {
            "worklet";
            var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
              type: "spring"
            }, onFinish = arguments.length > 2 ? arguments[2] : void 0;
            config.type === "direct" ? (sharedValue.value = next, onFinish == null || onFinish()) : config.type === "spring" ? sharedValue.value = withSpring(next, config, onFinish ? function() {
              "worklet";
              runOnJS(onFinish)();
            } : void 0) : sharedValue.value = withTiming(next, config, onFinish ? function() {
              "worklet";
              runOnJS(onFinish)();
            } : void 0);
          },
          stop: function() {
            "worklet";
            cancelAnimation(sharedValue);
          }
        };
      }, [
        sharedValue
      ]);
    },
    useAnimatedNumberReaction: function(param, onValue) {
      var value = param.value, instance = value.getInstance();
      return useAnimatedReaction(
        function() {
          return instance.value;
        },
        function(next, prev) {
          prev !== next && runOnJS(onValue)(next);
        },
        // dependency array is very important here
        [
          onValue,
          instance
        ]
      );
    },
    /**
    * `getStyle` must be a worklet
    */
    useAnimatedNumberStyle: function(val, getStyle) {
      var instance = val.getInstance(), derivedValue = useDerivedValue(
        function() {
          return instance.value;
        },
        // dependency array is very important here
        [
          instance,
          getStyle
        ]
      );
      return useAnimatedStyle(
        function() {
          return getStyle(derivedValue.value);
        },
        // dependency array is very important here
        [
          val,
          getStyle,
          derivedValue,
          instance
        ]
      );
    },
    useAnimations: function(animationProps) {
      var props = animationProps.props, presence = animationProps.presence, style = animationProps.style, componentState = animationProps.componentState, animationKey = Array.isArray(props.animation) ? props.animation[0] : props.animation, isHydrating = componentState.unmounted === !0, disableAnimation = isHydrating || !animationKey, animate = {}, dontAnimate = {};
      if (disableAnimation)
        dontAnimate = style;
      else {
        var animateOnly = props.animateOnly;
        for (var key in style) {
          var value = style[key];
          !onlyAnimateKeys[key] || value === "auto" || typeof value == "string" && value.startsWith("calc") || animateOnly && !animateOnly.includes(key) ? dontAnimate[key] = value : animate[key] = value;
        }
      }
      componentState.unmounted === "should-enter" && (dontAnimate = style);
      var animateStr = JSON.stringify(animate), styles = React.useMemo(function() {
        return JSON.parse(animateStr);
      }, [
        animateStr
      ]), isExiting = !!(presence != null && presence[1]), presenceContext = React.useContext(PresenceContext), usePresenceValue = presence || void 0, transition = isHydrating ? {
        type: "transition",
        duration: 0
      } : animations[animationKey], hasClonedTransition = !1;
      if (Array.isArray(props.animation)) {
        var config = props.animation[1];
        if (config && (typeof config > "u" ? "undefined" : _type_of(config)) === "object")
          for (var key1 in config) {
            var val = config[key1];
            hasClonedTransition || (transition = Object.apply({}, transition), hasClonedTransition = !0), typeof val == "string" ? transition[key1] = animations[val] : transition[key1] = val;
          }
      }
      var motiProps = {
        animate: isExiting || componentState.unmounted === !0 ? {} : styles,
        transition: componentState.unmounted ? {
          duration: 0
        } : transition,
        usePresenceValue,
        presenceContext,
        exit: isExiting ? styles : void 0
      }, moti = useMotify(motiProps);
      return process.env.NODE_ENV === "development" && props.debug && console.info("useMotify(", JSON.stringify(motiProps, null, 2) + ")", {
        animationProps,
        motiProps,
        moti,
        style: [
          dontAnimate,
          moti.style
        ]
      }), {
        style: [
          dontAnimate,
          moti.style
        ]
      };
    }
  };
}
export {
  createAnimations
};
//# sourceMappingURL=createAnimations.js.map
