var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var studio_exports = {};
__export(studio_exports, {
  studio: () => studio
});
module.exports = __toCommonJS(studio_exports);
var import_node_module = require("node:module"), import_node_path = require("node:path"), import_static = require("@tamagui/static"), import_plugin_react_swc = __toESM(require("@vitejs/plugin-react-swc")), import_chalk = __toESM(require("chalk")), import_express = __toESM(require("express")), import_fs_extra = __toESM(require("fs-extra")), import_http_proxy_middleware = require("http-proxy-middleware"), import_vite = require("vite"), import_vite_plugin_inspect = __toESM(require("vite-plugin-inspect")), import_vite_tsconfig_paths = __toESM(require("vite-tsconfig-paths"));
const import_meta = {}, resolve = "url" in import_meta ? (0, import_node_module.createRequire)(import_meta.url).resolve : require.resolve, studio = async (options, isRemote = !1, isBuild = !1) => {
  const { tamaguiExtractPlugin, tamaguiPlugin } = await import("@tamagui/vite-plugin");
  await (0, import_fs_extra.ensureDir)(options.paths.dotDir);
  const configWatchPromise = (0, import_static.watchTamaguiConfig)(options.tamaguiOptions);
  let localServerPromise = new Promise(() => {
  });
  if (isRemote)
    console.log("Open ", import_chalk.default.green("https://studio.tamagui.dev"), " to load studio");
  else {
    process.env.VITE_IS_LOCAL = "1", process.stdout.on("error", (err) => {
      err.code == "EPIPE" && process.exit(0);
    });
    const { default: getPort } = await import("get-port"), { paths } = options, root = (0, import_node_path.dirname)((0, import_node_path.dirname)(resolve("@tamagui/studio"))), [serverPort, vitePort] = await Promise.all([
      getPort({
        port: 1421
      }),
      getPort({
        port: 1422
      })
    ]), targets = [
      resolve("@tamagui/lucide-icons").replace("/dist/cjs/index.js", ""),
      resolve("@tamagui/demos").replace("/dist/cjs/index.js", "")
    ], viteConfig = {
      root,
      server: {
        host: options.host,
        port: vitePort,
        hmr: !0,
        cors: !0
      },
      build: {
        rollupOptions: {}
      },
      plugins: [
        (0, import_plugin_react_swc.default)({
          tsDecorators: !0
        }),
        tamaguiPlugin({
          components: ["tamagui"]
        }),
        tamaguiExtractPlugin({
          config: "./src/tamagui.config.ts",
          disableExtraction: !0,
          components: ["tamagui"]
        }),
        (0, import_vite_tsconfig_paths.default)(),
        // await entryShakingPlugin({
        //   targets,
        // }),
        (0, import_vite_plugin_inspect.default)()
      ],
      define: {
        "process.env.TAMAGUI_KEEP_THEMES": "true",
        global: "window"
      }
    };
    if (isBuild)
      return await (0, import_vite.build)(viteConfig);
    const server = await (0, import_vite.createServer)(viteConfig);
    await server.listen();
    const info = server.httpServer?.address(), app = (0, import_express.default)();
    app.disable("x-powered-by"), app.use(import_express.default.static(paths.dotDir, { maxAge: "2h" })), app.get("/conf.json", async (req, res) => {
      const conf = await import_fs_extra.default.readJSON(paths.conf);
      res.status(200).json(conf);
    }), app.get("/pingz", async (req, res) => {
      res.status(200).json({
        hi: !0
      });
    }), app.get("/api/tamagui.config.json", async (req, res) => {
      try {
        res.status(200).json(await import_fs_extra.default.readJSON(paths.conf));
      } catch (err) {
        res.status(500).json({
          error: `${err.message}`
        });
      }
    }), app.get("/api/tamagui.themes.json", async (req, res) => {
      try {
        res.status(200).json(await import_fs_extra.default.readJSON((0, import_node_path.join)(paths.dotDir, "theme-builder.json")));
      } catch (err) {
        res.status(500).json({
          error: `${err.message}`
        });
      }
    });
    const target = `http://${info.address}:${vitePort}`;
    app.use(
      "/",
      (0, import_http_proxy_middleware.createProxyMiddleware)({
        target,
        ws: !0
      })
    );
    const appServer = app.listen(serverPort);
    localServerPromise = new Promise((res) => appServer.on("close", res)), console.log("Listening on", import_chalk.default.green(`http://localhost:${serverPort}`));
  }
  await Promise.allSettled([configWatchPromise, localServerPromise]);
};
//# sourceMappingURL=studio.js.map
