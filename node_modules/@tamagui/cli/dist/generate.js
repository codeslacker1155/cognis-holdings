#!/usr/bin/env node
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var generate_exports = {};
__export(generate_exports, {
  generateTypes: () => generateTypes,
  getTypes: () => getTypes
});
module.exports = __toCommonJS(generate_exports);
var import_fs_extra = __toESM(require("fs-extra")), import_ts_morph = require("ts-morph"), import_utils = require("./utils");
async function generateTypes(options) {
  const types = await getTypes(options);
  await import_fs_extra.default.writeJSON(options.paths.types, types, {
    spaces: 2
  });
}
async function getTypes(options) {
  const tamagui = await (0, import_utils.loadTamagui)(options.tamaguiOptions);
  if (!tamagui)
    throw new Error("No tamagui config");
  const nameToPaths = tamagui.nameToPaths || [], uniqueViewExportingPaths = new Set(
    Object.keys(nameToPaths).map((name) => `${[...nameToPaths[name]][0]}.ts*`)
  ), files = new import_ts_morph.Project({
    compilerOptions: {
      noEmit: !1,
      declaration: !0,
      emitDeclarationOnly: !0
    },
    skipAddingFilesFromTsConfig: !0,
    tsConfigFilePath: options.tsconfigPath
  }).addSourceFilesAtPaths([...uniqueViewExportingPaths]);
  return Object.fromEntries(
    files.flatMap((x) => [...x.getExportedDeclarations()].map(([k, v]) => [
      k,
      v[0].getType().getApparentType().getProperties().map((prop) => [
        prop.getEscapedName(),
        prop.getValueDeclaration()?.getType().getText()
      ])
    ]))
  );
}
//# sourceMappingURL=generate.js.map
