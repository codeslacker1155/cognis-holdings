"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var update_template_exports = {};
__export(update_template_exports, {
  updateTemplate: () => updateTemplate
});
module.exports = __toCommonJS(update_template_exports);
var import_chalk = __toESM(require("chalk")), import_child_process = require("child_process");
function _instanceof(left, right) {
  return right != null && typeof Symbol < "u" && right[Symbol.hasInstance] ? !!right[Symbol.hasInstance](left) : left instanceof right;
}
function updateTemplate(templateUrl) {
  var ignoredPatterns = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], _templateUrl_split_pop, templateName = ((_templateUrl_split_pop = templateUrl.split("/").pop()) === null || _templateUrl_split_pop === void 0 ? void 0 : _templateUrl_split_pop.split(".")[0]) || "template", remoteName = "".concat(templateName, "-template"), addRemoteCommand = "git remote add ".concat(remoteName, " ").concat(templateUrl), rmRemoteCommand = "git remote remove ".concat(remoteName);
  try {
    (0, import_child_process.execSync)(addRemoteCommand);
  } catch (error) {
    if (_instanceof(error, Error) && error.toString().includes("already exists"))
      (0, import_child_process.execSync)(rmRemoteCommand), (0, import_child_process.execSync)(addRemoteCommand);
    else
      throw error;
  }
  (0, import_child_process.execSync)("git fetch --all");
  try {
    (0, import_child_process.execSync)("git merge takeout-template/main --allow-unrelated-histories");
  } catch (error) {
    if (_instanceof(error, Error) && error.message.includes("unresolved conflict"))
      console.info(tamaguiLog("We've merged the latest changes. Please resolve the conflicts and commit the merge."));
    else
      throw error;
  }
  (0, import_child_process.execSync)("git reset HEAD ".concat(ignoredPatterns.join(" ")));
}
function tamaguiLog(message) {
  return "".concat(import_chalk.default.green("[Tamagui]"), " ").concat(message);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  updateTemplate
});
//# sourceMappingURL=update-template.js.map
