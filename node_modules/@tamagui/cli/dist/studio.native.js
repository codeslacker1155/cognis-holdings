"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var studio_exports = {};
__export(studio_exports, {
  studio: () => studio
});
module.exports = __toCommonJS(studio_exports);
var import_node_module = require("node:module"), import_node_path = require("node:path"), import_static = require("@tamagui/static"), import_plugin_react_swc = __toESM(require("@vitejs/plugin-react-swc")), import_chalk = __toESM(require("chalk")), import_express = __toESM(require("express")), import_fs_extra = __toESM(require("fs-extra")), import_http_proxy_middleware = require("http-proxy-middleware"), import_vite = require("vite"), import_vite_plugin_inspect = __toESM(require("vite-plugin-inspect")), import_vite_tsconfig_paths = __toESM(require("vite-tsconfig-paths"));
const import_meta = {};
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg), value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  info.done ? resolve2(value) : Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve2, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
function _ts_generator(thisArg, body) {
  var f, y, t, g, _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  };
  return g = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    for (; _; ) try {
      if (f = 1, y && (t = op[0] & 2 ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      switch (y = 0, t && (op = [
        op[0] & 2,
        t.value
      ]), op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          return _.label++, {
            value: op[1],
            done: !1
          };
        case 5:
          _.label++, y = op[1], op = [
            0
          ];
          continue;
        case 7:
          op = _.ops.pop(), _.trys.pop();
          continue;
        default:
          if (t = _.trys, !(t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1], t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2], _.ops.push(op);
            break;
          }
          t[2] && _.ops.pop(), _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [
        6,
        e
      ], y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: !0
    };
  }
}
var resolve = "url" in import_meta ? (0, import_node_module.createRequire)(import_meta.url).resolve : require.resolve, studio = function() {
  var _ref = _async_to_generator(function(options) {
    var isRemote, isBuild, _ref2, tamaguiExtractPlugin, tamaguiPlugin, configWatchPromise, localServerPromise, _server_httpServer, _ref1, getPort, paths, root, _ref22, serverPort, vitePort, targets, viteConfig, server, info, app, target, appServer, _arguments = arguments;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return isRemote = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : !1, isBuild = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : !1, [
            4,
            import("@tamagui/vite-plugin")
          ];
        case 1:
          return _ref2 = _state.sent(), tamaguiExtractPlugin = _ref2.tamaguiExtractPlugin, tamaguiPlugin = _ref2.tamaguiPlugin, [
            4,
            (0, import_fs_extra.ensureDir)(options.paths.dotDir)
          ];
        case 2:
          return _state.sent(), configWatchPromise = (0, import_static.watchTamaguiConfig)(options.tamaguiOptions), localServerPromise = new Promise(function() {
          }), isRemote ? [
            3,
            9
          ] : (process.env.VITE_IS_LOCAL = "1", process.stdout.on("error", function(err) {
            err.code == "EPIPE" && process.exit(0);
          }), [
            4,
            import("get-port")
          ]);
        case 3:
          return _ref1 = _state.sent(), getPort = _ref1.default, paths = options.paths, root = (0, import_node_path.dirname)((0, import_node_path.dirname)(resolve("@tamagui/studio"))), [
            4,
            Promise.all([
              getPort({
                port: 1421
              }),
              getPort({
                port: 1422
              })
            ])
          ];
        case 4:
          return _ref22 = _sliced_to_array.apply(void 0, [
            _state.sent(),
            2
          ]), serverPort = _ref22[0], vitePort = _ref22[1], targets = [
            resolve("@tamagui/lucide-icons").replace("/dist/cjs/index.js", ""),
            resolve("@tamagui/demos").replace("/dist/cjs/index.js", "")
          ], viteConfig = {
            root,
            server: {
              host: options.host,
              port: vitePort,
              hmr: !0,
              cors: !0
            },
            build: {
              rollupOptions: {}
            },
            plugins: [
              (0, import_plugin_react_swc.default)({
                tsDecorators: !0
              }),
              tamaguiPlugin({
                components: [
                  "tamagui"
                ]
              }),
              tamaguiExtractPlugin({
                config: "./src/tamagui.config.ts",
                disableExtraction: !0,
                components: [
                  "tamagui"
                ]
              }),
              (0, import_vite_tsconfig_paths.default)(),
              // await entryShakingPlugin({
              //   targets,
              // }),
              (0, import_vite_plugin_inspect.default)()
            ],
            define: {
              "process.env.TAMAGUI_KEEP_THEMES": "true",
              global: "window"
            }
          }, isBuild ? [
            4,
            (0, import_vite.build)(viteConfig)
          ] : [
            3,
            6
          ];
        case 5:
          return [
            2,
            _state.sent()
          ];
        case 6:
          return [
            4,
            (0, import_vite.createServer)(viteConfig)
          ];
        case 7:
          return server = _state.sent(), [
            4,
            server.listen()
          ];
        case 8:
          return _state.sent(), info = (_server_httpServer = server.httpServer) === null || _server_httpServer === void 0 ? void 0 : _server_httpServer.address(), app = (0, import_express.default)(), app.disable("x-powered-by"), app.use(import_express.default.static(paths.dotDir, {
            maxAge: "2h"
          })), app.get("/conf.json", function() {
            var _ref3 = _async_to_generator(function(req, res) {
              var conf;
              return _ts_generator(this, function(_state2) {
                switch (_state2.label) {
                  case 0:
                    return [
                      4,
                      import_fs_extra.default.readJSON(paths.conf)
                    ];
                  case 1:
                    return conf = _state2.sent(), res.status(200).json(conf), [
                      2
                    ];
                }
              });
            });
            return function(req, res) {
              return _ref3.apply(this, arguments);
            };
          }()), app.get("/pingz", function() {
            var _ref3 = _async_to_generator(function(req, res) {
              return _ts_generator(this, function(_state2) {
                return res.status(200).json({
                  hi: !0
                }), [
                  2
                ];
              });
            });
            return function(req, res) {
              return _ref3.apply(this, arguments);
            };
          }()), app.get("/api/tamagui.config.json", function() {
            var _ref3 = _async_to_generator(function(req, res) {
              var _, _1, err;
              return _ts_generator(this, function(_state2) {
                switch (_state2.label) {
                  case 0:
                    return _state2.trys.push([
                      0,
                      2,
                      ,
                      3
                    ]), _1 = (_ = res.status(200)).json, [
                      4,
                      import_fs_extra.default.readJSON(paths.conf)
                    ];
                  case 1:
                    return _1.apply(_, [
                      _state2.sent()
                    ]), [
                      3,
                      3
                    ];
                  case 2:
                    return err = _state2.sent(), res.status(500).json({
                      error: "".concat(err.message)
                    }), [
                      3,
                      3
                    ];
                  case 3:
                    return [
                      2
                    ];
                }
              });
            });
            return function(req, res) {
              return _ref3.apply(this, arguments);
            };
          }()), app.get("/api/tamagui.themes.json", function() {
            var _ref3 = _async_to_generator(function(req, res) {
              var _, _1, err;
              return _ts_generator(this, function(_state2) {
                switch (_state2.label) {
                  case 0:
                    return _state2.trys.push([
                      0,
                      2,
                      ,
                      3
                    ]), _1 = (_ = res.status(200)).json, [
                      4,
                      import_fs_extra.default.readJSON((0, import_node_path.join)(paths.dotDir, "theme-builder.json"))
                    ];
                  case 1:
                    return _1.apply(_, [
                      _state2.sent()
                    ]), [
                      3,
                      3
                    ];
                  case 2:
                    return err = _state2.sent(), res.status(500).json({
                      error: "".concat(err.message)
                    }), [
                      3,
                      3
                    ];
                  case 3:
                    return [
                      2
                    ];
                }
              });
            });
            return function(req, res) {
              return _ref3.apply(this, arguments);
            };
          }()), target = "http://".concat(info.address, ":").concat(vitePort), app.use("/", (0, import_http_proxy_middleware.createProxyMiddleware)({
            target,
            ws: !0
          })), appServer = app.listen(serverPort), localServerPromise = new Promise(function(res) {
            return appServer.on("close", res);
          }), console.log("Listening on", import_chalk.default.green("http://localhost:".concat(serverPort))), [
            3,
            10
          ];
        case 9:
          console.log("Open ", import_chalk.default.green("https://studio.tamagui.dev"), " to load studio"), _state.label = 10;
        case 10:
          return [
            4,
            Promise.allSettled([
              configWatchPromise,
              localServerPromise
            ])
          ];
        case 11:
          return _state.sent(), [
            2
          ];
      }
    });
  });
  return function(options) {
    return _ref.apply(this, arguments);
  };
}();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  studio
});
//# sourceMappingURL=studio.js.map
