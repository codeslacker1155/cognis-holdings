"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var utils_exports = {};
__export(utils_exports, {
  disposeAll: () => disposeAll,
  ensure: () => ensure,
  getOptions: () => getOptions,
  loadTamagui: () => loadTamagui,
  registerDispose: () => registerDispose
});
module.exports = __toCommonJS(utils_exports);
var import_path = require("path"), import_static = require("@tamagui/static"), import_chalk = __toESM(require("chalk")), import_fs_extra = __toESM(require("fs-extra"));
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg), value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function _ts_generator(thisArg, body) {
  var f, y, t, g, _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  };
  return g = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    for (; _; ) try {
      if (f = 1, y && (t = op[0] & 2 ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      switch (y = 0, t && (op = [
        op[0] & 2,
        t.value
      ]), op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          return _.label++, {
            value: op[1],
            done: !1
          };
        case 5:
          _.label++, y = op[1], op = [
            0
          ];
          continue;
        case 7:
          op = _.ops.pop(), _.trys.pop();
          continue;
        default:
          if (t = _.trys, !(t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1], t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2], _.ops.push(op);
            break;
          }
          t[2] && _.ops.pop(), _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [
        6,
        e
      ], y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: !0
    };
  }
}
function getOptions() {
  return _getOptions.apply(this, arguments);
}
function _getOptions() {
  return _getOptions = _async_to_generator(function() {
    var _ref, _ref_root, root, _ref_tsconfigPath, tsconfigPath, tamaguiOptions, host, debug, loadTamaguiOptions, tsConfigFilePath, dotDir, pkgJson, config, e, filledOptions, finalOptions, _arguments = arguments;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return _ref = _arguments.length > 0 && _arguments[0] !== void 0 ? _arguments[0] : {}, _ref_root = _ref.root, root = _ref_root === void 0 ? process.cwd() : _ref_root, _ref_tsconfigPath = _ref.tsconfigPath, tsconfigPath = _ref_tsconfigPath === void 0 ? "tsconfig.json" : _ref_tsconfigPath, tamaguiOptions = _ref.tamaguiOptions, host = _ref.host, debug = _ref.debug, loadTamaguiOptions = _ref.loadTamaguiOptions, tsConfigFilePath = (0, import_path.join)(root, tsconfigPath), [
            4,
            import_fs_extra.default.pathExists(tsConfigFilePath)
          ];
        case 1:
          ensure.apply(void 0, [
            _state.sent(),
            "No tsconfig found: ".concat(tsConfigFilePath)
          ]), dotDir = (0, import_path.join)(root, ".tamagui"), pkgJson = {}, config = "", _state.label = 2;
        case 2:
          return _state.trys.push([
            2,
            5,
            ,
            6
          ]), [
            4,
            getDefaultTamaguiConfigPath()
          ];
        case 3:
          return config = _state.sent(), [
            4,
            (0, import_fs_extra.readJSON)((0, import_path.join)(root, "package.json"))
          ];
        case 4:
          return pkgJson = _state.sent(), [
            3,
            6
          ];
        case 5:
          return e = _state.sent(), [
            3,
            6
          ];
        case 6:
          return filledOptions = _object_spread({
            platform: "native",
            components: [
              "tamagui"
            ],
            config
          }, tamaguiOptions), finalOptions = loadTamaguiOptions ? (0, import_static.loadTamaguiBuildConfigSync)(filledOptions) : filledOptions, [
            2,
            {
              mode: process.env.NODE_ENV === "production" ? "production" : "development",
              root,
              host: host || "127.0.0.1",
              pkgJson,
              debug,
              tsconfigPath,
              tamaguiOptions: finalOptions,
              paths: {
                root,
                dotDir,
                conf: (0, import_path.join)(dotDir, "tamagui.config.json"),
                types: (0, import_path.join)(dotDir, "types.json")
              }
            }
          ];
      }
    });
  }), _getOptions.apply(this, arguments);
}
function ensure(condition, message) {
  condition || (console.error(import_chalk.default.red.bold("Error:"), import_chalk.default.yellow("".concat(message))), process.exit(1));
}
var defaultPaths = [
  "tamagui.config.ts",
  (0, import_path.join)("src", "tamagui.config.ts")
], cachedPath = "";
function getDefaultTamaguiConfigPath() {
  return _getDefaultTamaguiConfigPath.apply(this, arguments);
}
function _getDefaultTamaguiConfigPath() {
  return _getDefaultTamaguiConfigPath = _async_to_generator(function() {
    var existingPaths, existing, found;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return cachedPath ? [
            2,
            cachedPath
          ] : [
            4,
            Promise.all(defaultPaths.map(function(path) {
              return (0, import_fs_extra.pathExists)(path);
            }))
          ];
        case 1:
          if (existingPaths = _state.sent(), existing = existingPaths.findIndex(function(x) {
            return !!x;
          }), found = defaultPaths[existing], !found)
            throw new Error("No found tamagui.config.ts");
          return cachedPath = found, [
            2,
            found
          ];
      }
    });
  }), _getDefaultTamaguiConfigPath.apply(this, arguments);
}
var cached = null, loadTamagui = function() {
  var _ref = _async_to_generator(function(opts) {
    var loaded, _tmp;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return _tmp = {}, [
            4,
            getDefaultTamaguiConfigPath()
          ];
        case 1:
          return [
            4,
            import_static.loadTamagui.apply(void 0, [
              _object_spread.apply(void 0, [
                (_tmp.config = _state.sent(), _tmp.components = [
                  "tamagui"
                ], _tmp),
                opts
              ])
            ])
          ];
        case 2:
          return loaded = _state.sent(), loaded && (cached = loaded), [
            2,
            loaded
          ];
      }
    });
  });
  return function(opts) {
    return _ref.apply(this, arguments);
  };
}(), disposers = /* @__PURE__ */ new Set();
function registerDispose(cb) {
  disposers.add(cb);
}
function disposeAll() {
  disposers.forEach(function(cb) {
    return cb();
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  disposeAll,
  ensure,
  getOptions,
  loadTamagui,
  registerDispose
});
//# sourceMappingURL=utils.js.map
