"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var build_exports = {};
__export(build_exports, {
  build: () => build
});
module.exports = __toCommonJS(build_exports);
var import_node_path = require("node:path"), import_static = require("@tamagui/static"), import_chokidar = __toESM(require("chokidar")), import_fs_extra = require("fs-extra"), import_micromatch = __toESM(require("micromatch"));
function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg), value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  info.done ? resolve2(value) : Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve2, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _ts_generator(thisArg, body) {
  var f, y, t, g, _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  };
  return g = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    for (; _; ) try {
      if (f = 1, y && (t = op[0] & 2 ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      switch (y = 0, t && (op = [
        op[0] & 2,
        t.value
      ]), op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          return _.label++, {
            value: op[1],
            done: !1
          };
        case 5:
          _.label++, y = op[1], op = [
            0
          ];
          continue;
        case 7:
          op = _.ops.pop(), _.trys.pop();
          continue;
        default:
          if (t = _.trys, !(t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1], t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2], _.ops.push(op);
            break;
          }
          t[2] && _.ops.pop(), _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [
        6,
        e
      ], y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: !0
    };
  }
}
var build = function() {
  var _ref = _async_to_generator(function(options) {
    var _options_dir, sourceDir, promises, buildOptions, _options_target, platform, tamaguiOptions;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return sourceDir = (_options_dir = options.dir) !== null && _options_dir !== void 0 ? _options_dir : ".", promises = [], buildOptions = (0, import_static.loadTamaguiBuildConfigSync)(options.tamaguiOptions), platform = (_options_target = options.target) !== null && _options_target !== void 0 ? _options_target : "web", process.env.TAMAGUI_TARGET = platform, tamaguiOptions = _object_spread_props(_object_spread({}, buildOptions), {
            platform
          }), [
            4,
            (0, import_static.loadTamagui)(tamaguiOptions)
          ];
        case 1:
          return _state.sent(), [
            4,
            new Promise(function(res) {
              import_chokidar.default.watch("".concat(sourceDir, "/**/*.tsx"), {}).on("add", function(relativePath) {
                if (!(options.exclude && import_micromatch.default.contains(relativePath, options.exclude)) && !(options.include && !import_micromatch.default.contains(relativePath, options.include))) {
                  var sourcePath = (0, import_node_path.resolve)(process.cwd(), relativePath);
                  console.info(" [tamagui] optimizing ".concat(sourcePath)), promises.push(_async_to_generator(function() {
                    var _process_env, source, extractor, out, cssName, stylePath, code, out1;
                    return _ts_generator(this, function(_state2) {
                      switch (_state2.label) {
                        case 0:
                          return options.debug && ((_process_env = process.env).NODE_ENV || (_process_env.NODE_ENV = "development")), [
                            4,
                            (0, import_fs_extra.readFile)(sourcePath, "utf-8")
                          ];
                        case 1:
                          return source = _state2.sent(), platform !== "web" ? [
                            3,
                            4
                          ] : (extractor = (0, import_static.createExtractor)({
                            platform
                          }), [
                            4,
                            (0, import_static.extractToClassNames)({
                              extractor,
                              source,
                              sourcePath,
                              options: buildOptions,
                              shouldPrintDebug: options.debug || !1
                            })
                          ]);
                        case 2:
                          return out = _state2.sent(), out ? (cssName = "_" + (0, import_node_path.basename)(sourcePath, (0, import_node_path.extname)(sourcePath)), stylePath = (0, import_node_path.join)((0, import_node_path.dirname)(sourcePath), cssName + ".css"), code = 'import "./'.concat(cssName, `.css"
`).concat(out.js), [
                            4,
                            Promise.all([
                              (0, import_fs_extra.writeFile)(sourcePath, code, "utf-8"),
                              (0, import_fs_extra.writeFile)(stylePath, out.styles, "utf-8")
                            ])
                          ]) : [
                            2
                          ];
                        case 3:
                          _state2.sent(), _state2.label = 4;
                        case 4:
                          return out1 = (0, import_static.extractToNative)(sourcePath, source, tamaguiOptions), [
                            4,
                            (0, import_fs_extra.writeFile)(sourcePath, out1.code, "utf-8")
                          ];
                        case 5:
                          return _state2.sent(), [
                            2
                          ];
                      }
                    });
                  })());
                }
              }).on("ready", function() {
                res();
              });
            })
          ];
        case 2:
          return _state.sent(), [
            4,
            Promise.all(promises)
          ];
        case 3:
          return _state.sent(), [
            2
          ];
      }
    });
  });
  return function(options) {
    return _ref.apply(this, arguments);
  };
}();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  build
});
//# sourceMappingURL=build.js.map
