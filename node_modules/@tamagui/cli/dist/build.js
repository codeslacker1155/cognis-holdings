var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var build_exports = {};
__export(build_exports, {
  build: () => build
});
module.exports = __toCommonJS(build_exports);
var import_node_path = require("node:path"), import_static = require("@tamagui/static"), import_chokidar = __toESM(require("chokidar")), import_fs_extra = require("fs-extra"), import_micromatch = __toESM(require("micromatch"));
const build = async (options) => {
  const sourceDir = options.dir ?? ".", promises = [], buildOptions = (0, import_static.loadTamaguiBuildConfigSync)(options.tamaguiOptions), platform = options.target ?? "web";
  process.env.TAMAGUI_TARGET = platform;
  const tamaguiOptions = {
    ...buildOptions,
    platform
  };
  await (0, import_static.loadTamagui)(tamaguiOptions), await new Promise((res) => {
    import_chokidar.default.watch(`${sourceDir}/**/*.tsx`, {
      // persistent: true,
    }).on("add", (relativePath) => {
      if (options.exclude && import_micromatch.default.contains(relativePath, options.exclude) || options.include && !import_micromatch.default.contains(relativePath, options.include))
        return;
      const sourcePath = (0, import_node_path.resolve)(process.cwd(), relativePath);
      console.info(` [tamagui] optimizing ${sourcePath}`), promises.push(
        (async () => {
          options.debug && (process.env.NODE_ENV ||= "development");
          const source = await (0, import_fs_extra.readFile)(sourcePath, "utf-8");
          if (platform === "web") {
            const extractor = (0, import_static.createExtractor)({
              platform
            }), out2 = await (0, import_static.extractToClassNames)({
              extractor,
              source,
              sourcePath,
              options: buildOptions,
              shouldPrintDebug: options.debug || !1
            });
            if (!out2)
              return;
            const cssName = "_" + (0, import_node_path.basename)(sourcePath, (0, import_node_path.extname)(sourcePath)), stylePath = (0, import_node_path.join)((0, import_node_path.dirname)(sourcePath), cssName + ".css"), code = `import "./${cssName}.css"
${out2.js}`;
            await Promise.all([
              (0, import_fs_extra.writeFile)(sourcePath, code, "utf-8"),
              (0, import_fs_extra.writeFile)(stylePath, out2.styles, "utf-8")
            ]);
          }
          const out = (0, import_static.extractToNative)(sourcePath, source, tamaguiOptions);
          await (0, import_fs_extra.writeFile)(sourcePath, out.code, "utf-8");
        })()
      );
    }).on("ready", () => {
      res();
    });
  }), await Promise.all(promises);
};
//# sourceMappingURL=build.js.map
