"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
));
var import_arg = __toESM(require("arg")), import_chalk = __toESM(require("chalk")), import_add = require("./add.js"), import_utils = require("./utils"), import_static = require("@tamagui/static");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg2) {
  try {
    var info = gen[key](arg2), value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
function _ts_generator(thisArg, body) {
  var f, y, t, g, _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  };
  return g = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    for (; _; ) try {
      if (f = 1, y && (t = op[0] & 2 ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      switch (y = 0, t && (op = [
        op[0] & 2,
        t.value
      ]), op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          return _.label++, {
            value: op[1],
            done: !1
          };
        case 5:
          _.label++, y = op[1], op = [
            0
          ];
          continue;
        case 7:
          op = _.ops.pop(), _.trys.pop();
          continue;
        default:
          if (t = _.trys, !(t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1], t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2], _.ops.push(op);
            break;
          }
          t[2] && _.ops.pop(), _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [
        6,
        e
      ], y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: !0
    };
  }
}
[
  "exit",
  "SIGINT"
].forEach(function(_) {
  process.on(_, function() {
    (0, import_utils.disposeAll)(), process.exit();
  });
});
var COMMAND_MAP = {
  check: {
    description: "Checks your dependencies for inconsistent versions.",
    shorthands: [],
    flags: {
      "--help": Boolean,
      "--debug": Boolean,
      "--verbose": Boolean
    },
    run: function() {
      return _async_to_generator(function() {
        var _arg2, _, flags2, options, instance, isNonTamaguiNamedDep, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, dep;
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return _arg2 = (0, import_arg.default)(this.flags), _ = _arg2._, flags2 = _object_without_properties(_arg2, [
                "_"
              ]), [
                4,
                (0, import_utils.getOptions)({
                  debug: flags2["--debug"] ? flags2["--verbose"] ? "verbose" : !0 : !1,
                  loadTamaguiOptions: !0
                })
              ];
            case 1:
              return options = _state.sent(), [
                4,
                (0, import_static.checkDeps)(options.paths.root, {
                  depType: [
                    "dependencies",
                    "devDependencies"
                  ]
                })
              ];
            case 2:
              instance = _state.sent(), isNonTamaguiNamedDep = {
                "react-native-web-lite": !0,
                "react-native-web-internals": !0
              }, _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
              try {
                for (_iterator = instance.getDependencies()[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0)
                  dep = _step.value, !(!dep.name.includes("tamagui") && !isNonTamaguiNamedDep[dep.name]) && dep.isMismatching && console.warn(`-------------------------------------------------------------------------------------------------

\u26A0\uFE0F  [tamagui] Mis-matching dependency version found in: `.concat(dep.name, `

      This will cause errors in your app. To fix, make sure all tamagui dependencies
      in your repo are on on the same version.
          
      Other versions used in the repo: `).concat(dep.versions.map(function(version) {
                    return version.version;
                  }).join(", "), `

-------------------------------------------------------------------------------------------------`));
              } catch (err) {
                _didIteratorError = !0, _iteratorError = err;
              } finally {
                try {
                  !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
                } finally {
                  if (_didIteratorError)
                    throw _iteratorError;
                }
              }
              return [
                2
              ];
          }
        });
      }).apply(this);
    }
  },
  generate: {
    description: "Builds your entire tamagui configuration and outputs any CSS.",
    shorthands: [],
    flags: {
      "--help": Boolean,
      "--debug": Boolean,
      "--verbose": Boolean
    },
    run: function() {
      return _async_to_generator(function() {
        var _arg2, _, flags2, options;
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return _arg2 = (0, import_arg.default)(this.flags), _ = _arg2._, flags2 = _object_without_properties(_arg2, [
                "_"
              ]), [
                4,
                (0, import_utils.getOptions)({
                  debug: flags2["--debug"] ? flags2["--verbose"] ? "verbose" : !0 : !1,
                  loadTamaguiOptions: !0
                })
              ];
            case 1:
              return options = _state.sent(), process.env.TAMAGUI_KEEP_THEMES = "1", [
                4,
                (0, import_static.loadTamagui)(_object_spread_props(_object_spread({}, options.tamaguiOptions), {
                  platform: "web"
                }))
              ];
            case 2:
              return _state.sent(), [
                2
              ];
          }
        });
      }).apply(this);
    }
  },
  "generate-themes": {
    shorthands: [
      "gt"
    ],
    description: "Use to pre-build your themes",
    flags: {
      "--help": Boolean,
      "--debug": Boolean,
      "--verbose": Boolean
    },
    run: function() {
      return _async_to_generator(function() {
        var _arg2, _, flags2, options, _1, _cmd, inPath, outPath, _require, generateThemes, writeGeneratedThemes, generated, err;
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return _arg2 = (0, import_arg.default)(this.flags), _ = _arg2._, flags2 = _object_without_properties(_arg2, [
                "_"
              ]), [
                4,
                (0, import_utils.getOptions)({
                  debug: flags2["--debug"] ? flags2["--verbose"] ? "verbose" : !0 : !1
                })
              ];
            case 1:
              if (options = _state.sent(), _1 = _sliced_to_array(_, 3), _cmd = _1[0], inPath = _1[1], outPath = _1[2], !inPath || !outPath)
                throw new Error("Must supply both input and output paths, missing one (inPath: ".concat(inPath, ", outPath: ").concat(outPath, ")"));
              _require = require("@tamagui/generate-themes"), generateThemes = _require.generateThemes, writeGeneratedThemes = _require.writeGeneratedThemes, _state.label = 2;
            case 2:
              return _state.trys.push([
                2,
                5,
                ,
                6
              ]), [
                4,
                generateThemes(inPath)
              ];
            case 3:
              return generated = _state.sent(), [
                4,
                writeGeneratedThemes(options.paths.dotDir, outPath, generated)
              ];
            case 4:
              return _state.sent(), [
                3,
                6
              ];
            case 5:
              return err = _state.sent(), console.error("Error generating themes: ".concat(err)), [
                2
              ];
            case 6:
              return console.info("Successfully generated themes to ".concat(outPath)), [
                2
              ];
          }
        });
      }).apply(this);
    }
  },
  add: {
    shorthands: [
      "a"
    ],
    description: "Use to add fonts and icons to your monorepo. Supported types: ".concat(import_add.generatedPackageTypes.join(", ")),
    flags: {
      "--help": Boolean,
      "--debug": Boolean,
      "--verbose": Boolean
    },
    run: function() {
      return _async_to_generator(function() {
        var _arg2, _, flags2, installGeneratedPackage, _1, cmd, type, path;
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return _arg2 = (0, import_arg.default)(this.flags), _ = _arg2._, flags2 = _object_without_properties(_arg2, [
                "_"
              ]), installGeneratedPackage = require("./add.js").installGeneratedPackage, _1 = _sliced_to_array(_, 3), cmd = _1[0], type = _1[1], path = _1[2], [
                4,
                installGeneratedPackage(type, path)
              ];
            case 1:
              return _state.sent(), [
                2
              ];
          }
        });
      }).apply(this);
    }
  },
  build: {
    shorthands: [
      "b"
    ],
    description: "Use to pre-build a Tamagui component directory",
    flags: {
      "--help": Boolean,
      "--debug": Boolean,
      "--verbose": Boolean,
      "--target": String,
      "--include": String,
      "--exclude": String
    },
    run: function() {
      return _async_to_generator(function() {
        var _arg2, _, flags2, _1, _command, dir, imported, options;
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return _arg2 = (0, import_arg.default)(this.flags), _ = _arg2._, flags2 = _object_without_properties(_arg2, [
                "_"
              ]), _1 = _sliced_to_array(_, 2), _command = _1[0], dir = _1[1], [
                4,
                import("./build.js")
              ];
            case 1:
              return imported = _state.sent(), [
                4,
                (0, import_utils.getOptions)({
                  debug: flags2["--debug"] ? flags2["--verbose"] ? "verbose" : !0 : !1
                })
              ];
            case 2:
              return options = _state.sent(), [
                4,
                imported.default.build(_object_spread_props(_object_spread({}, options), {
                  dir,
                  include: flags2["--include"],
                  target: flags2["--target"] || "web",
                  exclude: flags2["--exclude"]
                }))
              ];
            case 3:
              return _state.sent(), [
                2
              ];
          }
        });
      }).apply(this);
    }
  },
  // update: {
  //   shorthands: [],
  //   description: `Update all tamagui packages within a monorepo`,
  //   flags: {},
  //   async run() {
  //     const { update } = await import('./update')
  //     await update()
  //   },
  // },
  "update-template": {
    shorthands: [
      "ut"
    ],
    description: "Used to update your git repo with the source template. (e.g. Takeout)",
    flags: {
      "--help": Boolean,
      "--template-repo": String,
      "--ignored-patterns": String
    },
    run: function() {
      return _async_to_generator(function() {
        var _flags_ignoredpatterns, _arg2, _, flags2, updateTemplate;
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              if (_arg2 = (0, import_arg.default)(this.flags), _ = _arg2._, flags2 = _object_without_properties(_arg2, [
                "_"
              ]), updateTemplate = require("./update-template").updateTemplate, !flags2["--template-repo"])
                throw new Error("--template-repo is required");
              return [
                4,
                updateTemplate(flags2["--template-repo"], (_flags_ignoredpatterns = flags2["--ignored-patterns"]) === null || _flags_ignoredpatterns === void 0 ? void 0 : _flags_ignoredpatterns.split(" "))
              ];
            case 1:
              return _state.sent(), [
                2
              ];
          }
        });
      }).apply(this);
    }
  }
}, commandEntries = Object.keys(COMMAND_MAP).flatMap(function(command2) {
  var definition2 = COMMAND_MAP[command2], entries = [
    command2
  ].concat(_to_consumable_array(definition2.shorthands)).map(function(cmd) {
    return [
      cmd,
      definition2
    ];
  });
  return entries;
}), commands = Object.fromEntries(commandEntries), _arg = (0, import_arg.default)({
  "--help": Boolean,
  "--version": Boolean
}, {
  permissive: !0
}), _arg__ = _sliced_to_array(_arg._, 1), command = _arg__[0], flags = _object_without_properties(_arg, [
  "_"
]);
flags["--version"] && (console.info(require("../package.json").version), process.exit(0));
!command && flags["--help"] && (console.info(`$ tamagui

commands:

`.concat(Object.keys(COMMAND_MAP).map(function(key) {
  return "  ".concat(key);
}).join(`
`))), process.exit(0));
command in commands || (console.error(), console.warn(import_chalk.default.yellow("Not a valid command: ".concat(command))), process.exit(1));
var definition = commands[command];
main();
function main() {
  return _main.apply(this, arguments);
}
function _main() {
  return _main = _async_to_generator(function() {
    var _arg2, _, cmdFlags, err;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          flags["--help"] && (console.info(`
$ tamagui `.concat(command, ": ").concat(definition.description, `
`)), console.info("Flags: ".concat(Object.entries(definition.flags).map(function(param) {
            var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
            return "".concat(k, " (").concat(v.name, ")");
          }))), process.exit(0)), _arg2 = (0, import_arg.default)(definition.flags), _ = _arg2._, cmdFlags = _object_without_properties(_arg2, [
            "_"
          ]), cmdFlags["--help"] && (console.info("$ tamagui ".concat(_, `

    Flags: `).concat(JSON.stringify(cmdFlags, null, 2), `

`)), process.exit(0)), _state.label = 1;
        case 1:
          return _state.trys.push([
            1,
            3,
            ,
            4
          ]), [
            4,
            definition.run()
          ];
        case 2:
          return _state.sent(), [
            3,
            4
          ];
        case 3:
          return err = _state.sent(), console.error("Error running command: ".concat(err.message)), [
            3,
            4
          ];
        case 4:
          return process.exit(0), [
            2
          ];
      }
    });
  }), _main.apply(this, arguments);
}
//# sourceMappingURL=cli.js.map
