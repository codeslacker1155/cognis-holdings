"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc2) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc2 = __getOwnPropDesc(from, key)) || desc2.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var html_exports = {};
__export(html_exports, {
  a: () => a,
  abbr: () => abbr,
  address: () => address,
  animate: () => animate,
  animateMotion: () => animateMotion,
  animateTransform: () => animateTransform,
  area: () => area,
  article: () => article,
  aside: () => aside,
  audio: () => audio,
  b: () => b,
  base: () => base,
  bdi: () => bdi,
  bdo: () => bdo,
  big: () => big,
  blockquote: () => blockquote,
  body: () => body,
  br: () => br,
  button: () => button,
  canvas: () => canvas,
  caption: () => caption,
  center: () => center,
  circle: () => circle,
  cite: () => cite,
  clipPath: () => clipPath,
  code: () => code,
  col: () => col,
  colgroup: () => colgroup,
  data: () => data,
  datalist: () => datalist,
  dd: () => dd,
  defs: () => defs,
  del: () => del,
  desc: () => desc,
  details: () => details,
  dfn: () => dfn,
  dialog: () => dialog,
  div: () => div,
  dl: () => dl,
  dt: () => dt,
  ellipse: () => ellipse,
  em: () => em,
  embed: () => embed,
  feBlend: () => feBlend,
  feColorMatrix: () => feColorMatrix,
  feComponentTransfer: () => feComponentTransfer,
  feComposite: () => feComposite,
  feConvolveMatrix: () => feConvolveMatrix,
  feDiffuseLighting: () => feDiffuseLighting,
  feDisplacementMap: () => feDisplacementMap,
  feDistantLight: () => feDistantLight,
  feDropShadow: () => feDropShadow,
  feFlood: () => feFlood,
  feFuncA: () => feFuncA,
  feFuncB: () => feFuncB,
  feFuncG: () => feFuncG,
  feFuncR: () => feFuncR,
  feGaussianBlur: () => feGaussianBlur,
  feImage: () => feImage,
  feMerge: () => feMerge,
  feMergeNode: () => feMergeNode,
  feMorphology: () => feMorphology,
  feOffset: () => feOffset,
  fePointLight: () => fePointLight,
  feSpecularLighting: () => feSpecularLighting,
  feSpotLight: () => feSpotLight,
  feTile: () => feTile,
  feTurbulence: () => feTurbulence,
  fieldset: () => fieldset,
  figcaption: () => figcaption,
  figure: () => figure,
  filter: () => filter,
  footer: () => footer,
  foreignObject: () => foreignObject,
  form: () => form,
  g: () => g,
  h1: () => h1,
  h2: () => h2,
  h3: () => h3,
  h4: () => h4,
  h5: () => h5,
  h6: () => h6,
  head: () => head,
  header: () => header,
  hgroup: () => hgroup,
  hr: () => hr,
  html: () => html,
  i: () => i,
  iframe: () => iframe,
  image: () => image,
  img: () => img,
  input: () => input,
  ins: () => ins,
  kbd: () => kbd,
  keygen: () => keygen,
  label: () => label,
  legend: () => legend,
  li: () => li,
  line: () => line,
  linearGradient: () => linearGradient,
  link: () => link,
  main: () => main,
  map: () => map,
  mark: () => mark,
  marker: () => marker,
  mask: () => mask,
  menu: () => menu,
  menuitem: () => menuitem,
  meta: () => meta,
  metadata: () => metadata,
  meter: () => meter,
  mpath: () => mpath,
  nav: () => nav,
  noindex: () => noindex,
  noscript: () => noscript,
  object: () => object,
  ol: () => ol,
  optgroup: () => optgroup,
  option: () => option,
  output: () => output,
  p: () => p,
  param: () => param,
  path: () => path,
  pattern: () => pattern,
  picture: () => picture,
  polygon: () => polygon,
  polyline: () => polyline,
  pre: () => pre,
  progress: () => progress,
  q: () => q,
  radialGradient: () => radialGradient,
  rect: () => rect,
  rp: () => rp,
  rt: () => rt,
  ruby: () => ruby,
  s: () => s,
  samp: () => samp,
  script: () => script,
  search: () => search,
  section: () => section,
  select: () => select,
  slot: () => slot,
  small: () => small,
  source: () => source,
  span: () => span,
  stop: () => stop,
  strong: () => strong,
  style: () => style,
  sub: () => sub,
  summary: () => summary,
  sup: () => sup,
  svg: () => svg,
  switch: () => switch_,
  symbol: () => symbol,
  table: () => table,
  tbody: () => tbody,
  td: () => td,
  template: () => template,
  text: () => text,
  textPath: () => textPath,
  textarea: () => textarea,
  tfoot: () => tfoot,
  th: () => th,
  thead: () => thead,
  time: () => time,
  title: () => title,
  tr: () => tr,
  track: () => track,
  tspan: () => tspan,
  u: () => u,
  ul: () => ul,
  use: () => use,
  var: () => var_,
  video: () => video,
  view: () => view,
  wbr: () => wbr,
  webview: () => webview
});
module.exports = __toCommonJS(html_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_react = __toESM(require("react"));
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {}, ownKeys2 = Object.keys(source2);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source2[key]);
    });
  }
  return target;
}
function ownKeys(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object2);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source2) {
  return source2 = source2 ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
  }), target;
}
function createHTML(TagName) {
  var component = /* @__PURE__ */ import_react.default.forwardRef(function(props, forwardedRef) {
    var TagComponent = TagName;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TagComponent, _object_spread_props(_object_spread({}, props), {
      ref: forwardedRef
    }));
  });
  return component.staticConfig = {
    componentName: TagName,
    Component: component,
    isText: !0,
    acceptsClassName: !0
  }, component.name = TagName, component.displayName = TagName, component;
}
var a = createHTML("a"), abbr = createHTML("abbr"), address = createHTML("address"), area = createHTML("area"), article = createHTML("article"), aside = createHTML("aside"), audio = createHTML("audio"), b = createHTML("b"), base = createHTML("base"), bdi = createHTML("bdi"), bdo = createHTML("bdo"), big = createHTML("big"), blockquote = createHTML("blockquote"), body = createHTML("body"), br = createHTML("br"), button = createHTML("button"), canvas = createHTML("canvas"), caption = createHTML("caption"), center = createHTML("center"), cite = createHTML("cite"), code = createHTML("code"), col = createHTML("col"), colgroup = createHTML("colgroup"), data = createHTML("data"), datalist = createHTML("datalist"), dd = createHTML("dd"), del = createHTML("del"), details = createHTML("details"), dfn = createHTML("dfn"), dialog = createHTML("dialog"), div = createHTML("div"), dl = createHTML("dl"), dt = createHTML("dt"), em = createHTML("em"), embed = createHTML("embed"), fieldset = createHTML("fieldset"), figcaption = createHTML("figcaption"), figure = createHTML("figure"), footer = createHTML("footer"), form = createHTML("form"), h1 = createHTML("h1"), h2 = createHTML("h2"), h3 = createHTML("h3"), h4 = createHTML("h4"), h5 = createHTML("h5"), h6 = createHTML("h6"), head = createHTML("head"), header = createHTML("header"), hgroup = createHTML("hgroup"), hr = createHTML("hr"), html = createHTML("html"), i = createHTML("i"), iframe = createHTML("iframe"), img = createHTML("img"), input = createHTML("input"), ins = createHTML("ins"), kbd = createHTML("kbd"), keygen = createHTML("keygen"), label = createHTML("label"), legend = createHTML("legend"), li = createHTML("li"), link = createHTML("link"), main = createHTML("main"), map = createHTML("map"), mark = createHTML("mark"), menu = createHTML("menu"), menuitem = createHTML("menuitem"), meta = createHTML("meta"), meter = createHTML("meter"), nav = createHTML("nav"), noindex = createHTML("noindex"), noscript = createHTML("noscript"), object = createHTML("object"), ol = createHTML("ol"), optgroup = createHTML("optgroup"), option = createHTML("option"), output = createHTML("output"), p = createHTML("p"), param = createHTML("param"), picture = createHTML("picture"), pre = createHTML("pre"), progress = createHTML("progress"), q = createHTML("q"), rp = createHTML("rp"), rt = createHTML("rt"), ruby = createHTML("ruby"), s = createHTML("s"), samp = createHTML("samp"), search = createHTML("search"), slot = createHTML("slot"), script = createHTML("script"), section = createHTML("section"), select = createHTML("select"), small = createHTML("small"), source = createHTML("source"), span = createHTML("span"), strong = createHTML("strong"), style = createHTML("style"), sub = createHTML("sub"), summary = createHTML("summary"), sup = createHTML("sup"), table = createHTML("table"), template = createHTML("template"), tbody = createHTML("tbody"), td = createHTML("td"), textarea = createHTML("textarea"), tfoot = createHTML("tfoot"), th = createHTML("th"), thead = createHTML("thead"), time = createHTML("time"), title = createHTML("title"), tr = createHTML("tr"), track = createHTML("track"), u = createHTML("u"), ul = createHTML("ul"), var_ = createHTML("var");
var video = createHTML("video"), wbr = createHTML("wbr"), webview = createHTML("webview"), svg = createHTML("svg"), animate = createHTML("animate"), animateMotion = createHTML("animateMotion"), animateTransform = createHTML("animateTransform"), circle = createHTML("circle"), clipPath = createHTML("clipPath"), defs = createHTML("defs"), desc = createHTML("desc"), ellipse = createHTML("ellipse"), feBlend = createHTML("feBlend"), feColorMatrix = createHTML("feColorMatrix"), feComponentTransfer = createHTML("feComponentTransfer"), feComposite = createHTML("feComposite"), feConvolveMatrix = createHTML("feConvolveMatrix"), feDiffuseLighting = createHTML("feDiffuseLighting"), feDisplacementMap = createHTML("feDisplacementMap"), feDistantLight = createHTML("feDistantLight"), feDropShadow = createHTML("feDropShadow"), feFlood = createHTML("feFlood"), feFuncA = createHTML("feFuncA"), feFuncB = createHTML("feFuncB"), feFuncG = createHTML("feFuncG"), feFuncR = createHTML("feFuncR"), feGaussianBlur = createHTML("feGaussianBlur"), feImage = createHTML("feImage"), feMerge = createHTML("feMerge"), feMergeNode = createHTML("feMergeNode"), feMorphology = createHTML("feMorphology"), feOffset = createHTML("feOffset"), fePointLight = createHTML("fePointLight"), feSpecularLighting = createHTML("feSpecularLighting"), feSpotLight = createHTML("feSpotLight"), feTile = createHTML("feTile"), feTurbulence = createHTML("feTurbulence"), filter = createHTML("filter"), foreignObject = createHTML("foreignObject"), g = createHTML("g"), image = createHTML("image"), line = createHTML("line"), linearGradient = createHTML("linearGradient"), marker = createHTML("marker"), mask = createHTML("mask"), metadata = createHTML("metadata"), mpath = createHTML("mpath"), path = createHTML("path"), pattern = createHTML("pattern"), polygon = createHTML("polygon"), polyline = createHTML("polyline"), radialGradient = createHTML("radialGradient"), rect = createHTML("rect"), stop = createHTML("stop"), switch_ = createHTML("switch");
var symbol = createHTML("symbol"), text = createHTML("text"), textPath = createHTML("textPath"), tspan = createHTML("tspan"), use = createHTML("use"), view = createHTML("view");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  a,
  abbr,
  address,
  animate,
  animateMotion,
  animateTransform,
  area,
  article,
  aside,
  audio,
  b,
  base,
  bdi,
  bdo,
  big,
  blockquote,
  body,
  br,
  button,
  canvas,
  caption,
  center,
  circle,
  cite,
  clipPath,
  code,
  col,
  colgroup,
  data,
  datalist,
  dd,
  defs,
  del,
  desc,
  details,
  dfn,
  dialog,
  div,
  dl,
  dt,
  ellipse,
  em,
  embed,
  feBlend,
  feColorMatrix,
  feComponentTransfer,
  feComposite,
  feConvolveMatrix,
  feDiffuseLighting,
  feDisplacementMap,
  feDistantLight,
  feDropShadow,
  feFlood,
  feFuncA,
  feFuncB,
  feFuncG,
  feFuncR,
  feGaussianBlur,
  feImage,
  feMerge,
  feMergeNode,
  feMorphology,
  feOffset,
  fePointLight,
  feSpecularLighting,
  feSpotLight,
  feTile,
  feTurbulence,
  fieldset,
  figcaption,
  figure,
  filter,
  footer,
  foreignObject,
  form,
  g,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  head,
  header,
  hgroup,
  hr,
  html,
  i,
  iframe,
  image,
  img,
  input,
  ins,
  kbd,
  keygen,
  label,
  legend,
  li,
  line,
  linearGradient,
  link,
  main,
  map,
  mark,
  marker,
  mask,
  menu,
  menuitem,
  meta,
  metadata,
  meter,
  mpath,
  nav,
  noindex,
  noscript,
  object,
  ol,
  optgroup,
  option,
  output,
  p,
  param,
  path,
  pattern,
  picture,
  polygon,
  polyline,
  pre,
  progress,
  q,
  radialGradient,
  rect,
  rp,
  rt,
  ruby,
  s,
  samp,
  script,
  search,
  section,
  select,
  slot,
  small,
  source,
  span,
  stop,
  strong,
  style,
  sub,
  summary,
  sup,
  svg,
  switch: null,
  symbol,
  table,
  tbody,
  td,
  template,
  text,
  textPath,
  textarea,
  tfoot,
  th,
  thead,
  time,
  title,
  tr,
  track,
  tspan,
  u,
  ul,
  use,
  var: null,
  video,
  view,
  wbr,
  webview
});
//# sourceMappingURL=html.js.map
