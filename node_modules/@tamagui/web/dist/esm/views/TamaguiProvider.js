import React from "react";
import { isClient, isWeb, useIsomorphicLayoutEffect } from "@tamagui/constants";
import { ComponentContext } from "../contexts/ComponentContext";
import { useDidHydrateOnceRoot } from "../hooks/useDidHydrateOnce";
import { setupMediaListeners } from "../hooks/useMedia";
import { ThemeProvider } from "./ThemeProvider";
import { getSetting } from "../config";
import { jsx } from "react/jsx-runtime";
function TamaguiProvider({
  children,
  disableInjectCSS,
  config,
  className,
  defaultTheme,
  disableRootThemeClass,
  reset,
  themeClassNameOnRoot
}) {
  return setupMediaListeners(), isClient && (useDidHydrateOnceRoot(), useIsomorphicLayoutEffect(() => {
    if (config && !disableInjectCSS) {
      const style = document.createElement("style");
      return style.appendChild(document.createTextNode(config.getCSS())), document.head.appendChild(style), () => {
        document.head.removeChild(style);
      };
    }
  }, [config, disableInjectCSS])), /* @__PURE__ */ jsx(UnmountedClassName, { children: /* @__PURE__ */ jsx(ComponentContext.Provider, { animationDriver: config?.animations, children: /* @__PURE__ */ jsx(
    ThemeProvider,
    {
      themeClassNameOnRoot: themeClassNameOnRoot ?? getSetting("themeClassNameOnRoot"),
      disableRootThemeClass: disableRootThemeClass ?? getSetting("disableRootThemeClass"),
      defaultTheme: defaultTheme ?? (config ? Object.keys(config.themes)[0] : ""),
      reset,
      className,
      children
    }
  ) }) });
}
function UnmountedClassName(props) {
  const [mounted, setMounted] = React.useState(!1);
  return React.useEffect(() => {
    setMounted(!0);
  }, []), isWeb ? /* @__PURE__ */ jsx("span", { style: { display: "contents" }, className: mounted ? "" : "t_unmounted", children: props.children }) : props.children;
}
TamaguiProvider.displayName = "TamaguiProvider";
export {
  TamaguiProvider
};
//# sourceMappingURL=TamaguiProvider.js.map
