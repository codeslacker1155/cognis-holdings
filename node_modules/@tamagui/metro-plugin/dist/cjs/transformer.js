var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var transformer_exports = {};
__export(transformer_exports, {
  transform: () => transform
});
module.exports = __toCommonJS(transformer_exports);
var import_fs_extra = require("fs-extra"), import_metro_transform_worker = __toESM(require("metro-transform-worker")), import_node_path = require("node:path"), import_static = require("@tamagui/static");
const extractor = (0, import_static.createExtractor)();
async function transform(config, projectRoot, filename, data, options) {
  const ogPath = config.ogTransformPath || config.transformerPath, transformer = ogPath ? require(ogPath).transform : import_metro_transform_worker.default.transform;
  if (config.tamagui.disable || options.platform !== "web" || options.type === "asset" || filename.includes("node_modules"))
    return transformer(config, projectRoot, filename, data, options);
  if (
    // could by a styled() call:
    filename.endsWith(".ts") || filename.endsWith(".tsx") || filename.endsWith(".jsx")
  ) {
    const sourcePath = toPosixPath((0, import_node_path.join)(projectRoot, filename)), source = `${data}`, out = await (0, import_static.extractToClassNames)({
      extractor,
      options: {
        // @ts-ignore
        platform: "web",
        ...config.tamagui
      },
      shouldPrintDebug: source.startsWith("// debug-verbose") ? "verbose" : source.startsWith("// debug"),
      source,
      sourcePath
    });
    if (out?.styles) {
      const tmpDir = (0, import_node_path.join)(projectRoot, ".tamagui", "css"), outStylePath = toPosixPath(
        (0, import_node_path.join)(tmpDir, `${filename}`.replace(/[^a-zA-Z0-9]/gi, "") + ".css")
      );
      process.env.DEBUG?.includes("tamagui") && console.info(" Outputting CSS file:", outStylePath);
      const existsAlready = await (0, import_fs_extra.pathExists)(outStylePath);
      return await (0, import_fs_extra.outputFile)(outStylePath, out.styles, "utf-8"), existsAlready || await new Promise((res) => setTimeout(res, 400)), transformer(
        config,
        projectRoot,
        filename,
        Buffer.from(`${out.js}
require("${outStylePath}")`, "utf-8"),
        options
      );
    }
  }
  return transformer(config, projectRoot, filename, data, options);
}
function toPosixPath(path) {
  return path.split(import_node_path.sep).join(import_node_path.posix.sep);
}
//# sourceMappingURL=transformer.js.map
