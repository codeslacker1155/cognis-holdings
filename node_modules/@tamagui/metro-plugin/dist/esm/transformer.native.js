import { outputFile, pathExists } from "fs-extra";
import worker from "metro-transform-worker";
import { join, posix, sep } from "node:path";
import { createExtractor, extractToClassNames } from "@tamagui/static";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg), value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function _ts_generator(thisArg, body) {
  var f, y, t, g, _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  };
  return g = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    for (; _; ) try {
      if (f = 1, y && (t = op[0] & 2 ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      switch (y = 0, t && (op = [
        op[0] & 2,
        t.value
      ]), op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          return _.label++, {
            value: op[1],
            done: !1
          };
        case 5:
          _.label++, y = op[1], op = [
            0
          ];
          continue;
        case 7:
          op = _.ops.pop(), _.trys.pop();
          continue;
        default:
          if (t = _.trys, !(t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1], t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2], _.ops.push(op);
            break;
          }
          t[2] && _.ops.pop(), _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [
        6,
        e
      ], y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: !0
    };
  }
}
var extractor = createExtractor();
function transform(config, projectRoot, filename, data, options) {
  return _transform.apply(this, arguments);
}
function _transform() {
  return _transform = _async_to_generator(function(config, projectRoot, filename, data, options) {
    var ogPath, transformer, sourcePath, source, out, _process_env_DEBUG, tmpDir, outStylePath, existsAlready;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return ogPath = config.ogTransformPath || config.transformerPath, transformer = ogPath ? require(ogPath).transform : worker.transform, config.tamagui.disable || options.platform !== "web" || options.type === "asset" || filename.includes("node_modules") ? [
            2,
            transformer(config, projectRoot, filename, data, options)
          ] : (
            // could by a styled() call:
            filename.endsWith(".ts") || filename.endsWith(".tsx") || filename.endsWith(".jsx") ? (sourcePath = toPosixPath(join(projectRoot, filename)), source = "".concat(data), [
              4,
              extractToClassNames({
                extractor,
                options: _object_spread({
                  // @ts-ignore
                  platform: "web"
                }, config.tamagui),
                shouldPrintDebug: source.startsWith("// debug-verbose") ? "verbose" : source.startsWith("// debug"),
                source,
                sourcePath
              })
            ]) : [
              3,
              6
            ]
          );
        case 1:
          return out = _state.sent(), // just write it out to our tmp dir and require it for metro to do the rest of the css work
          out != null && out.styles ? (tmpDir = join(projectRoot, ".tamagui", "css"), outStylePath = toPosixPath(join(tmpDir, "".concat(filename).replace(/[^a-zA-Z0-9]/gi, "") + ".css")), !((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.includes("tamagui") && console.info(" Outputting CSS file:", outStylePath), [
            4,
            pathExists(outStylePath)
          ]) : [
            3,
            6
          ];
        case 2:
          return existsAlready = _state.sent(), [
            4,
            outputFile(outStylePath, out.styles, "utf-8")
          ];
        case 3:
          return _state.sent(), existsAlready ? [
            3,
            5
          ] : [
            4,
            new Promise(function(res) {
              return setTimeout(res, 400);
            })
          ];
        case 4:
          _state.sent(), _state.label = 5;
        case 5:
          return [
            2,
            transformer(config, projectRoot, filename, Buffer.from("".concat(out.js, `
require("`).concat(outStylePath, '")'), "utf-8"), options)
          ];
        case 6:
          return [
            2,
            transformer(config, projectRoot, filename, data, options)
          ];
      }
    });
  }), _transform.apply(this, arguments);
}
function toPosixPath(path) {
  return path.split(sep).join(posix.sep);
}
export {
  transform
};
//# sourceMappingURL=transformer.js.map
